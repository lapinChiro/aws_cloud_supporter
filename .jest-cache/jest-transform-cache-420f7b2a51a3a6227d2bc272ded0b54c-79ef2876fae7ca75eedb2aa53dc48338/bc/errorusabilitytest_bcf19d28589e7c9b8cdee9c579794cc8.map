{"file":"/home/kyohei/aws_cloud_supporter/tests/unit/utils/error-usability.test.ts","mappings":"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","names":[],"sources":["/home/kyohei/aws_cloud_supporter/tests/unit/utils/error-usability.test.ts"],"sourcesContent":["// CLAUDE.md準拠エラーユーザビリティテスト（BLUE段階: 最適化）\n\nimport { \n  CloudSupporterError, \n  ErrorType,\n  createFileError,\n  createParseError,\n  createResourceError,\n  createOutputError \n} from '../../../src/utils/error';\n\ndescribe('エラーメッセージユーザビリティ（CLAUDE.md: BLUE段階）', () => {\n\n  // ファイルエラーメッセージの分かりやすさ\n  it('should provide clear file error messages', () => {\n    const fileNotFoundError = createFileError(\n      'CloudFormation template not found',\n      '/nonexistent/template.yaml',\n      { originalError: 'ENOENT' }\n    );\n\n    const structured = fileNotFoundError.toStructuredOutput();\n    \n    expect(structured.message).toContain('not found');\n    expect(structured.filePath).toBe('/nonexistent/template.yaml');\n    expect(structured.details?.originalError).toBe('ENOENT');\n  });\n\n  // 構文エラーメッセージの詳細性\n  it('should provide detailed parse error information', () => {\n    const yamlSyntaxError = createParseError(\n      'YAML syntax error: unexpected character',\n      '/template.yaml',\n      23,\n      {\n        columnNumber: 15,\n        nearText: '  invalid: - syntax\\n    missing: indentation',\n        originalError: 'YAMLException: bad indentation'\n      }\n    );\n\n    expect(yamlSyntaxError.lineNumber).toBe(23);\n    expect(yamlSyntaxError.details?.columnNumber).toBe(15);\n    expect(yamlSyntaxError.details?.nearText).toContain('invalid: - syntax');\n  });\n\n  // リソースエラーメッセージのコンテキスト提供\n  it('should provide contextual resource error messages', () => {\n    const unsupportedResourceError = createResourceError(\n      'Resource type not supported for metrics analysis',\n      {\n        originalError: 'AWS::EC2::Instance',\n        nearText: 'Consider using supported resources: RDS, Lambda, ECS, ALB, DynamoDB, API Gateway'\n      }\n    );\n\n    expect(unsupportedResourceError.details?.nearText).toContain('supported resources');\n  });\n\n  // 出力エラーメッセージの実用性\n  it('should provide actionable output error messages', () => {\n    const writePermissionError = createOutputError(\n      'Cannot write to output file',\n      {\n        filePath: '/readonly/report.html',\n        error: 'EACCES',\n        originalError: 'Permission denied'\n      }\n    );\n\n    expect(writePermissionError.details?.error).toBe('EACCES');\n    expect(writePermissionError.details?.filePath).toBe('/readonly/report.html');\n  });\n\n  // 多言語対応の準備（将来拡張）\n  it('should structure error data for potential i18n', () => {\n    const error = createFileError(\n      'Template file exceeds size limit',\n      '/large-template.yaml',\n      { \n        fileSize: 52428800, // 50MB\n        originalError: 'File too large'\n      }\n    );\n\n    const structured = error.toStructuredOutput();\n    \n    // 構造化データにより翻訳可能\n    expect(structured.error).toBe('FILE_ERROR');\n    expect(structured.details?.fileSize).toBe(52428800);\n    expect(structured.timestamp).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\n  });\n});\n\ndescribe('エラーハンドラ統合テスト（CLAUDE.md: Integration）', () => {\n\n  // エラー出力フォーマットテスト\n  it('should format error output consistently', () => {\n    const originalConsoleError = console.error;\n    const errorOutput: string[] = [];\n    \n    // console.errorをキャプチャ\n    console.error = (...args: unknown[]) => {\n      errorOutput.push(args.join(' '));\n    };\n\n    try {\n      const testError = createParseError(\n        'Invalid YAML syntax',\n        '/test.yaml', \n        10,\n        { columnNumber: 5 }\n      );\n\n      // ErrorHandlerの一部機能をテスト（process.exitは避ける）\n      expect(testError.toStructuredOutput()).toBeDefined();\n      \n    } finally {\n      // console.error復元\n      console.error = originalConsoleError;\n    }\n  });\n\n  // メモリ効率性テスト\n  it('should handle errors efficiently without memory leaks', () => {\n    // 大量エラー生成・処理テスト\n    const errors: CloudSupporterError[] = [];\n    \n    for (let i = 0; i < 100; i++) {\n      errors.push(createFileError(`Error ${i}`, `/file${i}.yaml`));\n    }\n    \n    // メモリリークなし確認\n    expect(errors).toHaveLength(100);\n    \n    // 構造化出力の一貫性\n    errors.forEach(error => {\n      const structured = error.toStructuredOutput();\n      expect(structured.timestamp).toBeDefined();\n      expect(structured.error).toBe('FILE_ERROR');\n    });\n  });\n\n  // エラー種別判定の効率性\n  it('should efficiently categorize error types', () => {\n    const fileError = createFileError('test');\n    const parseError = createParseError('test');\n    const resourceError = createResourceError('test');\n    const outputError = createOutputError('test');\n\n    const errors = [fileError, parseError, resourceError, outputError];\n    \n    // 型ガード関数の正確性\n    expect(errors.filter(e => e.type === ErrorType.FILE_ERROR)).toHaveLength(1);\n    expect(errors.filter(e => e.type === ErrorType.PARSE_ERROR)).toHaveLength(1);\n    expect(errors.filter(e => e.type === ErrorType.RESOURCE_ERROR)).toHaveLength(1);\n    expect(errors.filter(e => e.type === ErrorType.OUTPUT_ERROR)).toHaveLength(1);\n  });\n});"],"version":3}