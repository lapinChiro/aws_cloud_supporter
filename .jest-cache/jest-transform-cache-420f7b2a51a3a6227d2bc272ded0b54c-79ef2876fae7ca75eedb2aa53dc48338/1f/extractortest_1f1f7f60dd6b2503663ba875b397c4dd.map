{"file":"/home/kyohei/aws_cloud_supporter/tests/unit/core/extractor.test.ts","mappings":"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","names":[],"sources":["/home/kyohei/aws_cloud_supporter/tests/unit/core/extractor.test.ts"],"sourcesContent":["// CLAUDE.md準拠ResourceExtractorテスト（RED段階: パフォーマンス重視 + Type-Driven）\n\nimport { readFileSync, writeFileSync, mkdirSync } from 'fs';\nimport path from 'path';\nimport { tmpdir } from 'os';\n\ndescribe('ResourceExtractor高速抽出（CLAUDE.md: TDD RED段階）', () => {\n\n  // RED段階: ResourceExtractorが存在しないことを確認\n  it('should fail until ResourceExtractor is implemented', () => {\n    expect(() => {\n      require('../../../src/core/extractor');\n    }).toThrow(); // まだファイル未実装で失敗\n  });\n\n  // O(n)アルゴリズム要件テスト（実装前失敗想定）\n  it('should extract resources with O(n) algorithm', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // 500リソース・3秒以内要件テスト（実装前失敗想定）\n  it('should process 500 resources within 3 seconds', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // 6つのサポート対象リソース判定テスト（実装前失敗想定）\n  it('should accurately identify 6 supported resource types', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // サポート対象外リソース集計テスト（実装前失敗想定）\n  it('should collect unsupported resource logical IDs', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // ECS Fargate判定テスト（実装前失敗想定）\n  it('should detect ECS Fargate services correctly', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // ALB vs NLB判定テスト（実装前失敗想定）\n  it('should distinguish ALB from NLB correctly', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // パフォーマンス監視テスト（実装前失敗想定）\n  it('should provide extraction time metrics', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // 型安全性テスト（実装前失敗想定）\n  it('should return type-safe ExtractResult', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // CLAUDE.md: No any types検証\n  it('should not use any types in extractor implementation', () => {\n    // ファイルが存在しないので失敗する想定\n    try {\n      const extractorCode = readFileSync(\n        path.join(__dirname, '../../../src/core/extractor.ts'),\n        'utf8'\n      );\n      expect(extractorCode).toHaveNoAnyTypes();\n    } catch {\n      expect(true).toBe(false); // ファイル未実装で失敗（RED段階）\n    }\n  });\n\n  // 単一責任原則テスト（実装前失敗想定）\n  it('should follow single responsibility principle', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n});\n\ndescribe('ResourceExtractorパフォーマンステスト（CLAUDE.md: 性能要件）', () => {\n\n  // 大量リソース処理テスト（実装前失敗想定）\n  it('should handle large templates efficiently', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // 並行抽出テスト（実装前失敗想定）\n  it('should support concurrent extraction safely', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // メモリ効率テスト（実装前失敗想定）\n  it('should extract resources without memory leaks', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // パフォーマンス監視テスト（実装前失敗想定）\n  it('should warn when extraction exceeds time limits', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n});\n\ndescribe('ResourceExtractor型安全性（CLAUDE.md: Type-Driven Development）', () => {\n\n  // 型ガード関数統合テスト（実装前失敗想定）\n  it('should integrate with existing type guard functions', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // Union型使用テスト（実装前失敗想定）\n  it('should utilize SupportedResource union type', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // CloudFormationTemplate型統合テスト（実装前失敗想定）\n  it('should work with CloudFormationTemplate type', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // ExtractResult型安全性テスト（実装前失敗想定）\n  it('should return properly typed ExtractResult', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n});\n\n// RED段階用テストヘルパー（リソース抽出テスト用データ）\ndescribe('テストヘルパー準備（RED段階）', () => {\n  let tempDir: string;\n\n  beforeAll(() => {\n    tempDir = path.join(tmpdir(), 'aws-cloud-supporter-extractor-test');\n    try {\n      mkdirSync(tempDir, { recursive: true });\n    } catch {\n      // 既存の場合は無視\n    }\n    \n    // テストフィクスチャー作成\n    createExtractionTestFixtures();\n  });\n\n  function createExtractionTestFixtures() {\n    // 混在リソーステンプレート（サポート対象＋対象外）\n    const mixedResourcesTemplate = {\n      AWSTemplateFormatVersion: \"2010-09-09\",\n      Description: \"Mixed resources template for extraction testing\",\n      Resources: {\n        // サポート対象リソース\n        TestRDS: {\n          Type: \"AWS::RDS::DBInstance\",\n          Properties: { Engine: \"mysql\", DBInstanceClass: \"db.t3.micro\" }\n        },\n        TestLambda: {\n          Type: \"AWS::Lambda::Function\", \n          Properties: { Runtime: \"nodejs20.x\", Handler: \"index.handler\" }\n        },\n        TestServerlessFunction: {\n          Type: \"AWS::Serverless::Function\",\n          Properties: { Runtime: \"python3.11\", Handler: \"app.lambda_handler\" }\n        },\n        TestECSService: {\n          Type: \"AWS::ECS::Service\",\n          Properties: { LaunchType: \"FARGATE\", Cluster: \"test-cluster\" }\n        },\n        TestALB: {\n          Type: \"AWS::ElasticLoadBalancingV2::LoadBalancer\",\n          Properties: { Type: \"application\", Scheme: \"internet-facing\" }\n        },\n        TestDynamoDB: {\n          Type: \"AWS::DynamoDB::Table\",\n          Properties: { BillingMode: \"PAY_PER_REQUEST\" }\n        },\n        TestAPI: {\n          Type: \"AWS::ApiGateway::RestApi\",\n          Properties: { Name: \"test-api\" }\n        },\n        TestServerlessAPI: {\n          Type: \"AWS::Serverless::Api\",\n          Properties: { StageName: \"prod\" }\n        },\n        \n        // サポート対象外リソース  \n        TestS3: {\n          Type: \"AWS::S3::Bucket\",\n          Properties: { BucketName: \"test-bucket\" }\n        },\n        TestEC2: {\n          Type: \"AWS::EC2::Instance\",\n          Properties: { InstanceType: \"t3.micro\" }\n        },\n        TestVPC: {\n          Type: \"AWS::EC2::VPC\",\n          Properties: { CidrBlock: \"10.0.0.0/16\" }\n        },\n        TestSNS: {\n          Type: \"AWS::SNS::Topic\",\n          Properties: { TopicName: \"test-topic\" }\n        },\n        TestNLB: {\n          Type: \"AWS::ElasticLoadBalancingV2::LoadBalancer\",\n          Properties: { Type: \"network\", Scheme: \"internal\" }\n        },\n        TestECSServiceEC2: {\n          Type: \"AWS::ECS::Service\", \n          Properties: { LaunchType: \"EC2\", Cluster: \"test-cluster\" }\n        }\n      }\n    };\n\n    writeFileSync(\n      path.join(tempDir, 'mixed-resources.json'), \n      JSON.stringify(mixedResourcesTemplate, null, 2), \n      'utf8'\n    );\n\n    // 大量リソーステンプレート（パフォーマンステスト用）\n    const largeResourcesTemplate = {\n      AWSTemplateFormatVersion: \"2010-09-09\",\n      Description: \"Large resources template for performance testing\",\n      Resources: {} as Record<string, unknown>\n    };\n\n    // 500リソース生成（サポート対象200個 + 対象外300個）\n    for (let i = 0; i < 200; i++) {\n      // サポート対象リソース\n      largeResourcesTemplate.Resources[`RDS${i}`] = {\n        Type: \"AWS::RDS::DBInstance\",\n        Properties: { Engine: \"mysql\", DBInstanceClass: \"db.t3.micro\" }\n      };\n      if (i < 100) {\n        largeResourcesTemplate.Resources[`Lambda${i}`] = {\n          Type: \"AWS::Lambda::Function\",\n          Properties: { Runtime: \"nodejs20.x\" }\n        };\n      }\n    }\n\n    for (let i = 0; i < 300; i++) {\n      // サポート対象外リソース\n      largeResourcesTemplate.Resources[`S3${i}`] = {\n        Type: \"AWS::S3::Bucket\",\n        Properties: { BucketName: `test-bucket-${i}` }\n      };\n    }\n\n    writeFileSync(\n      path.join(tempDir, 'large-resources-500.json'),\n      JSON.stringify(largeResourcesTemplate, null, 2),\n      'utf8'\n    );\n\n    // ECS特殊ケーステンプレート\n    const ecsTestTemplate = {\n      AWSTemplateFormatVersion: \"2010-09-09\",\n      Resources: {\n        FargateService: {\n          Type: \"AWS::ECS::Service\",\n          Properties: { LaunchType: \"FARGATE\" }\n        },\n        EC2Service: {\n          Type: \"AWS::ECS::Service\", \n          Properties: { LaunchType: \"EC2\" }\n        },\n        FargateSpotService: {\n          Type: \"AWS::ECS::Service\",\n          Properties: {\n            CapacityProviderStrategy: [\n              { CapacityProvider: \"FARGATE_SPOT\", Weight: 1 }\n            ]\n          }\n        },\n        MixedCapacityService: {\n          Type: \"AWS::ECS::Service\",\n          Properties: {\n            CapacityProviderStrategy: [\n              { CapacityProvider: \"FARGATE\", Weight: 1 },\n              { CapacityProvider: \"EC2\", Weight: 1 }\n            ]\n          }\n        }\n      }\n    };\n\n    writeFileSync(\n      path.join(tempDir, 'ecs-test.json'),\n      JSON.stringify(ecsTestTemplate, null, 2),\n      'utf8'\n    );\n\n    // ALB/NLB判定テンプレート\n    const loadBalancerTestTemplate = {\n      AWSTemplateFormatVersion: \"2010-09-09\",\n      Resources: {\n        ApplicationLB: {\n          Type: \"AWS::ElasticLoadBalancingV2::LoadBalancer\",\n          Properties: { Type: \"application\" }\n        },\n        NetworkLB: {\n          Type: \"AWS::ElasticLoadBalancingV2::LoadBalancer\",\n          Properties: { Type: \"network\" }\n        },\n        DefaultLB: {\n          Type: \"AWS::ElasticLoadBalancingV2::LoadBalancer\",\n          Properties: { Scheme: \"internet-facing\" } // Typeなし=application\n        },\n        GatewayLB: {\n          Type: \"AWS::ElasticLoadBalancingV2::LoadBalancer\",\n          Properties: { Type: \"gateway\" }\n        }\n      }\n    };\n\n    writeFileSync(\n      path.join(tempDir, 'loadbalancer-test.json'),\n      JSON.stringify(loadBalancerTestTemplate, null, 2),\n      'utf8'\n    );\n  }\n\n  // テストフィクスチャー作成確認\n  it('should create mixed resources test fixture', () => {\n    const mixedPath = path.join(tempDir, 'mixed-resources.json');\n    const content = JSON.parse(readFileSync(mixedPath, 'utf8'));\n    \n    expect(content.Resources).toBeDefined();\n    expect(Object.keys(content.Resources)).toHaveLength(14);\n  });\n\n  it('should create large resources test fixture', () => {\n    const largePath = path.join(tempDir, 'large-resources-500.json');\n    const content = JSON.parse(readFileSync(largePath, 'utf8'));\n    \n    expect(content.Resources).toBeDefined();\n    expect(Object.keys(content.Resources)).toHaveLength(500);\n  });\n\n  it('should create ECS test cases fixture', () => {\n    const ecsPath = path.join(tempDir, 'ecs-test.json');\n    const content = JSON.parse(readFileSync(ecsPath, 'utf8'));\n    \n    expect(content.Resources.FargateService).toBeDefined();\n    expect(content.Resources.EC2Service).toBeDefined();\n    expect(content.Resources.FargateSpotService).toBeDefined();\n  });\n\n  it('should create Load Balancer test cases fixture', () => {\n    const lbPath = path.join(tempDir, 'loadbalancer-test.json');\n    const content = JSON.parse(readFileSync(lbPath, 'utf8'));\n    \n    expect(content.Resources.ApplicationLB).toBeDefined();\n    expect(content.Resources.NetworkLB).toBeDefined();\n    expect(content.Resources.DefaultLB).toBeDefined();\n  });\n});"],"version":3}