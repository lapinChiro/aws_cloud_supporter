{"file":"/home/kyohei/aws_cloud_supporter/src/types/cloudformation.ts","mappings":"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","names":[],"sources":["/home/kyohei/aws_cloud_supporter/src/types/cloudformation.ts"],"sourcesContent":["// CLAUDE.md準拠CloudFormation型定義（any型完全排除、型安全性重視）\n\n// CloudFormationテンプレート最上位型\nexport interface CloudFormationTemplate {\n  AWSTemplateFormatVersion?: '2010-09-09';\n  Description?: string;\n  Parameters?: Record<string, ParameterDefinition>;\n  Resources: Record<string, CloudFormationResource>;\n  Outputs?: Record<string, OutputDefinition>;\n  Metadata?: CloudFormationMetadata;\n  Conditions?: Record<string, unknown>; // 条件は複雑なのでunknown\n  Mappings?: Record<string, unknown>; // マッピングも複雑なのでunknown\n  Transform?: string | string[]; // SAM等のtransform\n}\n\n// パラメータ定義（型安全）\nexport interface ParameterDefinition {\n  Type: 'String' | 'Number' | 'List<Number>' | 'CommaDelimitedList' | 'AWS::EC2::AvailabilityZone::Name' | 'AWS::EC2::VPC::Id';\n  Default?: unknown;\n  AllowedValues?: unknown[];\n  AllowedPattern?: string;\n  Description?: string;\n  MinLength?: number;\n  MaxLength?: number;\n  MinValue?: number;\n  MaxValue?: number;\n  NoEcho?: boolean;\n  ConstraintDescription?: string;\n}\n\n// 出力定義（型安全）\nexport interface OutputDefinition {\n  Description?: string;\n  Value: unknown; // CloudFormation関数等があるためunknown\n  Export?: {\n    Name: string;\n  };\n  Condition?: string;\n}\n\n// CloudFormationメタデータ（型安全）\nexport interface CloudFormationMetadata {\n  'AWS::CloudFormation::Designer'?: {\n    id?: string;\n    [key: string]: unknown;\n  };\n  'AWS::CloudFormation::Interface'?: {\n    ParameterGroups?: Array<{\n      Label?: { default?: string };\n      Parameters?: string[];\n    }>;\n    ParameterLabels?: Record<string, { default?: string }>;\n  };\n  [key: string]: unknown; // 拡張メタデータはunknown\n}\n\n// CloudFormationリソース基底型（厳密型定義）\nexport interface CloudFormationResource {\n  Type: string;\n  Properties?: unknown; // プロパティは型別に厳密定義\n  Condition?: string;\n  DependsOn?: string | string[];\n  Metadata?: CloudFormationMetadata;\n  CreationPolicy?: unknown;\n  UpdatePolicy?: unknown;\n  DeletionPolicy?: 'Delete' | 'Retain' | 'Snapshot';\n  UpdateReplacePolicy?: 'Delete' | 'Retain' | 'Snapshot';\n}\n\n// =============================================================================\n// RDS型定義（CLAUDE.md: 型安全性、車輪の再発明回避）\n// =============================================================================\n\nexport interface RDSDBInstance extends CloudFormationResource {\n  Type: 'AWS::RDS::DBInstance';\n  Properties?: RDSProperties;\n}\n\nexport interface RDSProperties {\n  // インスタンス基本設定\n  DBInstanceIdentifier?: string;\n  DBInstanceClass?: DBInstanceClass;\n  Engine?: DatabaseEngine;\n  EngineVersion?: string;\n  MasterUsername?: string;\n  MasterUserPassword?: string; // セキュリティ: 実際の値は格納しない\n  \n  // ストレージ設定\n  AllocatedStorage?: number;\n  StorageType?: StorageType;\n  StorageEncrypted?: boolean;\n  KmsKeyId?: string;\n  Iops?: number;\n  \n  // 可用性・バックアップ\n  MultiAZ?: boolean;\n  AvailabilityZone?: string;\n  BackupRetentionPeriod?: number;\n  PreferredBackupWindow?: string;\n  PreferredMaintenanceWindow?: string;\n  \n  // ネットワーク\n  VPCSecurityGroups?: string[];\n  DBSecurityGroups?: string[];\n  DBSubnetGroupName?: string;\n  Port?: number;\n  PubliclyAccessible?: boolean;\n  \n  // パフォーマンス・監視\n  EnablePerformanceInsights?: boolean;\n  PerformanceInsightsRetentionPeriod?: number;\n  MonitoringInterval?: number;\n  MonitoringRoleArn?: string;\n  \n  // その他設定（unknown型で型安全性確保）\n  [key: string]: unknown;\n}\n\n// 厳密な列挙型定義\nexport type DBInstanceClass = \n  // t3系（汎用バースト）\n  | 'db.t3.micro' | 'db.t3.small' | 'db.t3.medium' | 'db.t3.large' | 'db.t3.xlarge' | 'db.t3.2xlarge'\n  // m5系（汎用）\n  | 'db.m5.large' | 'db.m5.xlarge' | 'db.m5.2xlarge' | 'db.m5.4xlarge' | 'db.m5.8xlarge' | 'db.m5.12xlarge' | 'db.m5.16xlarge' | 'db.m5.24xlarge'\n  // r5系（メモリ最適化）\n  | 'db.r5.large' | 'db.r5.xlarge' | 'db.r5.2xlarge' | 'db.r5.4xlarge' | 'db.r5.8xlarge' | 'db.r5.12xlarge' | 'db.r5.16xlarge' | 'db.r5.24xlarge'\n  // r6g系（Graviton2）\n  | 'db.r6g.large' | 'db.r6g.xlarge' | 'db.r6g.2xlarge' | 'db.r6g.4xlarge'\n  | string; // 将来のインスタンスクラス対応\n\nexport type DatabaseEngine = 'mysql' | 'postgresql' | 'mariadb' | 'oracle-ee' | 'oracle-se2' | 'sqlserver-ex' | 'sqlserver-web' | 'sqlserver-se' | 'sqlserver-ee';\nexport type StorageType = 'standard' | 'gp2' | 'gp3' | 'io1' | 'io2';\n\n// =============================================================================\n// Lambda型定義（型安全性重視）\n// =============================================================================\n\nexport interface LambdaFunction extends CloudFormationResource {\n  Type: 'AWS::Lambda::Function';\n  Properties?: LambdaProperties;\n}\n\nexport interface ServerlessFunction extends CloudFormationResource {\n  Type: 'AWS::Serverless::Function';\n  Properties?: ServerlessLambdaProperties;\n}\n\nexport interface LambdaProperties {\n  FunctionName?: string;\n  Runtime?: LambdaRuntime;\n  Handler?: string;\n  Code?: {\n    ZipFile?: string;\n    S3Bucket?: string;\n    S3Key?: string;\n    S3ObjectVersion?: string;\n    ImageUri?: string;\n  };\n  Role?: string;\n  Timeout?: number; // 1-900秒\n  MemorySize?: number; // 128-10240MB\n  ReservedConcurrentExecutions?: number;\n  Environment?: {\n    Variables?: Record<string, string>;\n  };\n  DeadLetterConfig?: {\n    TargetArn?: string;\n  };\n  TracingConfig?: {\n    Mode?: 'Active' | 'PassThrough';\n  };\n  [key: string]: unknown;\n}\n\nexport interface ServerlessLambdaProperties extends LambdaProperties {\n  CodeUri?: string;\n  Events?: Record<string, unknown>; // SAMイベント定義\n  Policies?: unknown;\n  Layers?: string[];\n}\n\nexport type LambdaRuntime = \n  // Node.js\n  | 'nodejs18.x' | 'nodejs20.x'\n  // Python\n  | 'python3.9' | 'python3.10' | 'python3.11' | 'python3.12'\n  // Java\n  | 'java8.al2' | 'java11' | 'java17' | 'java21'\n  // .NET\n  | 'dotnet6' | 'dotnet8'\n  // Go\n  | 'go1.x'\n  // Ruby\n  | 'ruby3.2'\n  // カスタムランタイム\n  | 'provided.al2' | 'provided.al2023'\n  | string; // 新しいランタイム対応\n\n// =============================================================================\n// その他サポートリソース型定義\n// =============================================================================\n\nexport interface ECSService extends CloudFormationResource {\n  Type: 'AWS::ECS::Service';\n  Properties?: ECSServiceProperties;\n}\n\nexport interface ECSServiceProperties {\n  ServiceName?: string;\n  Cluster?: string;\n  TaskDefinition?: string;\n  LaunchType?: 'EC2' | 'FARGATE' | 'EXTERNAL';\n  CapacityProviderStrategy?: Array<{\n    CapacityProvider?: string;\n    Weight?: number;\n    Base?: number;\n  }>;\n  DesiredCount?: number;\n  PlatformVersion?: string;\n  [key: string]: unknown;\n}\n\nexport interface ApplicationLoadBalancer extends CloudFormationResource {\n  Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer';\n  Properties?: ALBProperties;\n}\n\nexport interface ALBProperties {\n  Name?: string;\n  Type?: 'application' | 'network' | 'gateway';\n  Scheme?: 'internet-facing' | 'internal';\n  IpAddressType?: 'ipv4' | 'dualstack';\n  Subnets?: string[];\n  SecurityGroups?: string[];\n  [key: string]: unknown;\n}\n\nexport interface DynamoDBTable extends CloudFormationResource {\n  Type: 'AWS::DynamoDB::Table';\n  Properties?: DynamoDBProperties;\n}\n\nexport interface DynamoDBProperties {\n  TableName?: string;\n  BillingMode?: 'PROVISIONED' | 'PAY_PER_REQUEST';\n  AttributeDefinitions?: Array<{\n    AttributeName?: string;\n    AttributeType?: 'S' | 'N' | 'B';\n  }>;\n  KeySchema?: Array<{\n    AttributeName?: string;\n    KeyType?: 'HASH' | 'RANGE';\n  }>;\n  GlobalSecondaryIndexes?: Array<{\n    IndexName?: string;\n    KeySchema?: Array<{\n      AttributeName?: string;\n      KeyType?: 'HASH' | 'RANGE';\n    }>;\n    Projection?: {\n      ProjectionType?: 'ALL' | 'KEYS_ONLY' | 'INCLUDE';\n      NonKeyAttributes?: string[];\n    };\n  }>;\n  [key: string]: unknown;\n}\n\nexport interface APIGatewayRestAPI extends CloudFormationResource {\n  Type: 'AWS::ApiGateway::RestApi';\n  Properties?: APIGatewayProperties;\n}\n\nexport interface ServerlessAPI extends CloudFormationResource {\n  Type: 'AWS::Serverless::Api';\n  Properties?: ServerlessAPIProperties;\n}\n\nexport interface APIGatewayProperties {\n  Name?: string;\n  Description?: string;\n  EndpointConfiguration?: {\n    Types?: Array<'EDGE' | 'REGIONAL' | 'PRIVATE'>;\n  };\n  [key: string]: unknown;\n}\n\nexport interface ServerlessAPIProperties extends APIGatewayProperties {\n  StageName?: string;\n  Cors?: unknown; // CORS設定は複雑なのでunknown\n  Auth?: unknown; // 認証設定は複雑なのでunknown\n}\n\n// =============================================================================\n// Union型定義（型安全性確保）\n// =============================================================================\n\n// サポート対象リソースのUnion型（CLAUDE.md: Type-Driven Development）\nexport type SupportedResource = \n  | RDSDBInstance\n  | LambdaFunction\n  | ServerlessFunction\n  | ECSService  \n  | ApplicationLoadBalancer\n  | DynamoDBTable\n  | APIGatewayRestAPI\n  | ServerlessAPI;\n\n// リソースタイプ列挙（DRY原則）\nexport enum ResourceType {\n  RDS_DB_INSTANCE = 'AWS::RDS::DBInstance',\n  LAMBDA_FUNCTION = 'AWS::Lambda::Function',\n  SERVERLESS_FUNCTION = 'AWS::Serverless::Function',\n  ECS_SERVICE = 'AWS::ECS::Service',\n  ALB = 'AWS::ElasticLoadBalancingV2::LoadBalancer',\n  DYNAMODB_TABLE = 'AWS::DynamoDB::Table',\n  API_GATEWAY = 'AWS::ApiGateway::RestApi',\n  SERVERLESS_API = 'AWS::Serverless::Api'\n}\n\n// リソース識別ヘルパー（型安全性確保）\nexport function isRDSInstance(resource: CloudFormationResource): resource is RDSDBInstance {\n  return resource.Type === ResourceType.RDS_DB_INSTANCE;\n}\n\nexport function isLambdaFunction(resource: CloudFormationResource): resource is LambdaFunction {\n  return resource.Type === ResourceType.LAMBDA_FUNCTION;\n}\n\nexport function isServerlessFunction(resource: CloudFormationResource): resource is ServerlessFunction {\n  return resource.Type === ResourceType.SERVERLESS_FUNCTION;\n}\n\nexport function isECSService(resource: CloudFormationResource): resource is ECSService {\n  return resource.Type === ResourceType.ECS_SERVICE;\n}\n\nexport function isALB(resource: CloudFormationResource): resource is ApplicationLoadBalancer {\n  return resource.Type === ResourceType.ALB;\n}\n\nexport function isDynamoDBTable(resource: CloudFormationResource): resource is DynamoDBTable {\n  return resource.Type === ResourceType.DYNAMODB_TABLE;\n}\n\nexport function isAPIGateway(resource: CloudFormationResource): resource is APIGatewayRestAPI {\n  return resource.Type === ResourceType.API_GATEWAY;\n}\n\nexport function isServerlessAPI(resource: CloudFormationResource): resource is ServerlessAPI {\n  return resource.Type === ResourceType.SERVERLESS_API;\n}\n\n// 型安全なリソース判定（CLAUDE.md: Type-Driven Development）\nexport function isSupportedResource(resource: CloudFormationResource): resource is SupportedResource {\n  const supportedTypes = new Set([\n    ResourceType.RDS_DB_INSTANCE,\n    ResourceType.LAMBDA_FUNCTION,\n    ResourceType.SERVERLESS_FUNCTION,\n    ResourceType.ECS_SERVICE,\n    ResourceType.ALB,\n    ResourceType.DYNAMODB_TABLE,\n    ResourceType.API_GATEWAY,\n    ResourceType.SERVERLESS_API\n  ]);\n  \n  return supportedTypes.has(resource.Type as ResourceType);\n}\n\n// Fargateサービス判定（型安全、ECS特殊ケース対応）\nexport function isFargateService(resource: CloudFormationResource): boolean {\n  if (!isECSService(resource)) return false;\n  \n  const props = resource.Properties as ECSServiceProperties;\n  if (!props) return false;\n  \n  // LaunchType直接指定\n  if (props.LaunchType === 'FARGATE') return true;\n  \n  // CapacityProviderStrategy経由\n  if (props.CapacityProviderStrategy) {\n    return props.CapacityProviderStrategy.some(strategy => \n      strategy.CapacityProvider === 'FARGATE' || \n      strategy.CapacityProvider === 'FARGATE_SPOT'\n    );\n  }\n  \n  return false;\n}\n\n// Application LB判定（NLB除外）\nexport function isApplicationLoadBalancer(resource: CloudFormationResource): boolean {\n  if (!isALB(resource)) return false;\n  \n  const props = resource.Properties as ALBProperties;\n  if (!props) return true; // デフォルトはApplication\n  \n  return !props.Type || props.Type === 'application';\n}"],"version":3}