03c2970a61d1f561c07e343acd79e5c8
"use strict";
// CLAUDE.md準拠BaseMetricsGenerator（SOLID抽象化原則 + Type-Driven Development）
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsGenerationMonitor = exports.BaseMetricsGenerator = void 0;
exports.validateMetricDefinition = validateMetricDefinition;
const error_1 = require("../utils/error");
// SOLID原則: 抽象化による拡張性確保（Open/Closed Principle）
class BaseMetricsGenerator {
    logger;
    constructor(logger) {
        this.logger = logger;
    }
    // メイン生成メソッド（CLAUDE.md: Type-Driven Development）
    async generate(resource) {
        const startTime = performance.now();
        try {
            // 型安全なリソース検証
            this.validateResource(resource);
            // 適用可能メトリクス決定
            const applicableConfigs = this.getApplicableMetrics(resource);
            // メトリクス定義生成（型安全性重視）
            const metrics = applicableConfigs.map(config => this.buildMetricDefinition(resource, config));
            const duration = performance.now() - startTime;
            // パフォーマンス監視（CLAUDE.md: 性能要件）
            if (duration > 1000) {
                this.logger.warn(`Metrics generation slow: ${duration.toFixed(0)}ms for ${this.getResourceId(resource)}`);
            }
            else {
                this.logger.debug(`Generated ${metrics.length} metrics for ${this.getResourceId(resource)} in ${duration.toFixed(1)}ms`);
            }
            return metrics;
        }
        catch (error) {
            const resourceId = this.getResourceId(resource);
            this.logger.error(`Failed to generate metrics for ${resourceId}`, error);
            throw (0, error_1.createResourceError)(`Metrics generation failed for ${resourceId}: ${error.message}`, { resourceType: resource.Type, originalError: error.message });
        }
    }
    // 適用可能メトリクス判定（Type-Driven Development）
    getApplicableMetrics(resource) {
        const allConfigs = this.getMetricsConfig(resource);
        return allConfigs.filter(config => {
            if (!config.applicableWhen) {
                return true; // 条件なしは全て適用
            }
            try {
                return config.applicableWhen(resource);
            }
            catch (error) {
                this.logger.warn(`Failed to evaluate metric condition: ${config.name}`, error);
                return false; // 評価失敗時は適用しない
            }
        });
    }
    // メトリクス定義構築（型安全性重視）
    buildMetricDefinition(resource, config) {
        const threshold = this.calculateThreshold(resource, config);
        return {
            metric_name: config.name,
            namespace: config.namespace,
            unit: config.unit,
            description: config.description,
            statistic: config.statistic,
            recommended_threshold: threshold,
            evaluation_period: config.evaluationPeriod,
            category: config.category,
            importance: config.importance,
            dimensions: this.buildDimensions(resource, config)
        };
    }
    // 動的しきい値計算（CLAUDE.md: アルゴリズム実装）
    calculateThreshold(resource, config) {
        // リソーススケール係数取得
        const scale = this.getResourceScale(resource);
        const base = config.threshold.base;
        // 動的計算（CLAUDE.md: Type-Driven Development）
        const warning = Math.round(base * scale * config.threshold.warningMultiplier);
        const critical = Math.round(base * scale * config.threshold.criticalMultiplier);
        // しきい値妥当性検証（warning < critical）
        if (warning >= critical) {
            this.logger.warn(`Invalid threshold calculation: warning=${warning} >= critical=${critical} for ${config.name}`);
            // 自動修正（critical = warning * 1.5）
            const correctedCritical = Math.round(warning * 1.5);
            this.logger.info(`Auto-corrected critical threshold: ${critical} → ${correctedCritical}`);
            return {
                warning,
                critical: correctedCritical
            };
        }
        return { warning, critical };
    }
    // CloudWatchディメンション構築（AWS仕様準拠）
    buildDimensions(resource, _config // 将来拡張用（現在未使用）
    ) {
        const resourceId = this.getResourceId(resource);
        const primaryDimension = this.getPrimaryDimensionName(resource.Type);
        return [
            {
                name: primaryDimension,
                value: resourceId
            }
        ];
    }
    // リソースタイプ別プライマリディメンション（AWS CloudWatch仕様）
    getPrimaryDimensionName(resourceType) {
        const dimensionMap = {
            'AWS::RDS::DBInstance': 'DBInstanceIdentifier',
            'AWS::Lambda::Function': 'FunctionName',
            'AWS::Serverless::Function': 'FunctionName',
            'AWS::ECS::Service': 'ServiceName',
            'AWS::ElasticLoadBalancingV2::LoadBalancer': 'LoadBalancer',
            'AWS::DynamoDB::Table': 'TableName',
            'AWS::ApiGateway::RestApi': 'ApiName',
            'AWS::Serverless::Api': 'ApiName'
        };
        return dimensionMap[resourceType] ?? 'ResourceId';
    }
    // 型安全なリソースID取得
    getResourceId(resource) {
        // LogicalIdプロパティの型安全取得
        const resourceWithId = resource;
        return resourceWithId.LogicalId ?? 'UnknownResource';
    }
    // リソース基本検証（型安全性）
    validateResource(resource) {
        if (!resource.Type || typeof resource.Type !== 'string') {
            throw (0, error_1.createResourceError)('Resource must have a valid Type property', { resourceData: JSON.stringify(resource) });
        }
        if (!this.getSupportedTypes().includes(resource.Type)) {
            throw (0, error_1.createResourceError)(`Unsupported resource type: ${resource.Type}`, {
                resourceType: resource.Type,
                supportedTypes: this.getSupportedTypes()
            });
        }
    }
}
exports.BaseMetricsGenerator = BaseMetricsGenerator;
// パフォーマンス測定ヘルパー（CLAUDE.md: 単一責任分離）
class MetricsGenerationMonitor {
    static async measureGenerationPerformance(generator, resource) {
        const startTime = performance.now();
        const memoryBefore = process.memoryUsage().heapUsed;
        const metrics = await generator.generate(resource);
        const duration = performance.now() - startTime;
        const memoryAfter = process.memoryUsage().heapUsed;
        const memoryDelta = (memoryAfter - memoryBefore) / 1024 / 1024;
        // 統計情報計算
        const stats = {
            resourceType: resource.Type,
            metricsGenerated: metrics.length,
            generationTimeMs: Math.round(duration),
            averageThresholdWarning: metrics.reduce((sum, m) => sum + m.recommended_threshold.warning, 0) / metrics.length,
            averageThresholdCritical: metrics.reduce((sum, m) => sum + m.recommended_threshold.critical, 0) / metrics.length
        };
        // パフォーマンス評価
        let performanceGrade;
        if (duration < 100 && memoryDelta < 1) {
            performanceGrade = 'A'; // 100ms以下、メモリ1MB以下
        }
        else if (duration < 500 && memoryDelta < 5) {
            performanceGrade = 'B'; // 500ms以下、メモリ5MB以下
        }
        else if (duration < 1000 && memoryDelta < 10) {
            performanceGrade = 'C'; // 1秒以下、メモリ10MB以下
        }
        else {
            performanceGrade = 'F'; // 要件超過
        }
        return {
            metrics,
            stats,
            performanceGrade
        };
    }
}
exports.MetricsGenerationMonitor = MetricsGenerationMonitor;
// 型安全なメトリクス検証（CLAUDE.md: Type-Driven Development）
function validateMetricDefinition(metric) {
    const errors = [];
    // 必須フィールド検証
    if (!metric.metric_name || typeof metric.metric_name !== 'string') {
        errors.push('metric_name must be a non-empty string');
    }
    if (!metric.namespace || typeof metric.namespace !== 'string') {
        errors.push('namespace must be a non-empty string');
    }
    // しきい値妥当性検証（カスタムマッチャーと同じロジック）
    const threshold = metric.recommended_threshold;
    if (threshold.warning >= threshold.critical) {
        errors.push(`Invalid threshold: warning(${threshold.warning}) >= critical(${threshold.critical})`);
    }
    if (threshold.warning <= 0 || threshold.critical <= 0) {
        errors.push('Thresholds must be positive numbers');
    }
    // 評価期間検証
    const validPeriods = [60, 300, 900, 3600]; // CloudWatch標準期間
    if (!validPeriods.includes(metric.evaluation_period)) {
        errors.push(`Invalid evaluation_period: ${metric.evaluation_period}. Valid: ${validPeriods.join(', ')}`);
    }
    return {
        isValid: errors.length === 0,
        errors
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,