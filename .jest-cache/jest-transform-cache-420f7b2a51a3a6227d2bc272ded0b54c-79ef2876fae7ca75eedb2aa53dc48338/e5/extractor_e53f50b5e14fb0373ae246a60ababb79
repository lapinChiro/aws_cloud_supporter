46f050d97321eccdf7afd4b55ef5019a
"use strict";
// CLAUDE.md準拠ResourceExtractor（UNIX Philosophy + Type-Driven Development）
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtractionPerformanceMonitor = exports.ResourceExtractor = void 0;
exports.validateSupportedResourceTypes = validateSupportedResourceTypes;
const cloudformation_1 = require("../types/cloudformation");
// UNIX Philosophy: 一つのことをうまくやる（リソース抽出のみ）
class ResourceExtractor {
    // サポート対象リソースタイプ（CLAUDE.md: DRY原則、public for testing）
    static SUPPORTED_TYPES = new Set([
        'AWS::RDS::DBInstance',
        'AWS::Lambda::Function',
        'AWS::Serverless::Function',
        'AWS::ECS::Service',
        'AWS::ElasticLoadBalancingV2::LoadBalancer',
        'AWS::DynamoDB::Table',
        'AWS::ApiGateway::RestApi',
        'AWS::Serverless::Api'
    ]);
    // メイン抽出メソッド（O(n)アルゴリズム、型安全性重視）
    extract(template) {
        const startTime = performance.now();
        const supported = [];
        const unsupported = [];
        // O(n)での高速処理（CLAUDE.md: パフォーマンス重視）
        for (const [logicalId, resource] of Object.entries(template.Resources)) {
            // 型安全なリソース判定（Don't Reinvent the Wheel: 既存型ガード使用）
            if (this.isSupportedResourceType(resource)) {
                // 特殊ケース判定（ECS FargateとApplication LBのみ）
                if (this.isActuallySupported(resource)) {
                    // SupportedResource型にLogicalIdを追加
                    const supportedResource = {
                        ...resource,
                        LogicalId: logicalId
                    };
                    supported.push(supportedResource);
                }
                else {
                    // 条件に合わないリソース（例：ECS EC2サービス、NLB）
                    unsupported.push(logicalId);
                }
            }
            else {
                // 完全にサポート対象外のリソース
                unsupported.push(logicalId);
            }
        }
        const extractionTimeMs = performance.now() - startTime;
        // パフォーマンス監視（CLAUDE.md: 性能要件）
        if (extractionTimeMs > 3000) {
            console.warn(`⚠️  Resource extraction took ${extractionTimeMs.toFixed(0)}ms (target: <3000ms)`);
        }
        return {
            supported,
            unsupported,
            totalCount: Object.keys(template.Resources).length,
            extractionTimeMs: Math.round(extractionTimeMs)
        };
    }
    // サポート対象リソースタイプ判定（型安全性）
    isSupportedResourceType(resource) {
        return ResourceExtractor.SUPPORTED_TYPES.has(resource.Type);
    }
    // 実際にサポート対象かの詳細判定（特殊ケース考慮）
    isActuallySupported(resource) {
        // ECS：Fargateサービスのみサポート
        if (resource.Type === 'AWS::ECS::Service') {
            return (0, cloudformation_1.isFargateService)(resource);
        }
        // LoadBalancer：Application LBのみサポート
        if (resource.Type === 'AWS::ElasticLoadBalancingV2::LoadBalancer') {
            return (0, cloudformation_1.isApplicationLoadBalancer)(resource);
        }
        // その他のサポート対象リソースは全て対象
        return true;
    }
    // 統計情報取得（デバッグ・監視用）
    getExtractionStats(template) {
        const resourceTypes = {};
        let supportedCount = 0;
        let totalCount = 0;
        for (const [logicalId, resource] of Object.entries(template.Resources)) {
            totalCount++;
            // リソースタイプ分布
            resourceTypes[resource.Type] = (resourceTypes[resource.Type] || 0) + 1;
            // サポート対象カウント
            if (this.isSupportedResourceType(resource) && this.isActuallySupported(resource)) {
                supportedCount++;
            }
        }
        return {
            resourceTypeDistribution: resourceTypes,
            supportedResourceCount: supportedCount,
            totalResourceCount: totalCount,
            supportedPercentage: totalCount > 0 ? Math.round((supportedCount / totalCount) * 100) : 0
        };
    }
    // リソースタイプ別グループ化（後続処理の効率化）
    groupResourcesByType(resources) {
        const groups = new Map();
        for (const resource of resources) {
            const type = resource.Type;
            if (!groups.has(type)) {
                groups.set(type, []);
            }
            groups.get(type).push(resource);
        }
        return groups;
    }
    // 型安全なリソース検索（CLAUDE.md: Type-Driven Development）
    findResourcesByType(resources, resourceType) {
        return resources.filter(resource => resource.Type === resourceType);
    }
}
exports.ResourceExtractor = ResourceExtractor;
// パフォーマンス測定ユーティリティ（CLAUDE.md: 単一責任分離）
class ExtractionPerformanceMonitor {
    static measureExtractionPerformance(extractor, template) {
        const memoryBefore = process.memoryUsage().heapUsed;
        const startTime = performance.now();
        const result = extractor.extract(template);
        const duration = performance.now() - startTime;
        const memoryAfter = process.memoryUsage().heapUsed;
        const memoryUsage = (memoryAfter - memoryBefore) / 1024 / 1024; // MB
        // パフォーマンス評価
        let performanceGrade;
        if (duration < 1000 && memoryUsage < 10) {
            performanceGrade = 'A';
        }
        else if (duration < 3000 && memoryUsage < 50) {
            performanceGrade = 'B';
        }
        else if (duration < 5000 && memoryUsage < 100) {
            performanceGrade = 'C';
        }
        else {
            performanceGrade = 'F';
        }
        return {
            result,
            memoryUsage,
            performanceGrade
        };
    }
}
exports.ExtractionPerformanceMonitor = ExtractionPerformanceMonitor;
// 型安全なリソースタイプ検証（CLAUDE.md: Type-Driven Development）
function validateSupportedResourceTypes() {
    const expectedTypes = [
        'AWS::RDS::DBInstance',
        'AWS::Lambda::Function',
        'AWS::Serverless::Function',
        'AWS::ECS::Service',
        'AWS::ElasticLoadBalancingV2::LoadBalancer',
        'AWS::DynamoDB::Table',
        'AWS::ApiGateway::RestApi',
        'AWS::Serverless::Api'
    ];
    const actualTypes = Array.from(ResourceExtractor.SUPPORTED_TYPES);
    const missingTypes = expectedTypes.filter(type => !actualTypes.includes(type));
    const extraTypes = actualTypes.filter(type => !expectedTypes.includes(type));
    return {
        isValid: missingTypes.length === 0 && extraTypes.length === 0,
        missingTypes,
        extraTypes
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,