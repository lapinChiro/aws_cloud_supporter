{"file":"/home/kyohei/aws_cloud_supporter/tests/unit/core/parser-integration.test.ts","mappings":"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","names":[],"sources":["/home/kyohei/aws_cloud_supporter/tests/unit/core/parser-integration.test.ts"],"sourcesContent":["// CLAUDE.md準拠TemplateParser実テンプレート統合テスト（BLUE段階）\n\nimport { TemplateParser } from '../../../src/core/parser';\nimport path from 'path';\n\ndescribe('TemplateParser実テンプレート統合（CLAUDE.md: 実用性確認）', () => {\n  let parser: TemplateParser;\n\n  beforeEach(() => {\n    parser = new TemplateParser();\n  });\n\n  // 実際のサーバーレステンプレートテスト\n  it('should parse real serverless SAM template', async () => {\n    const samTemplatePath = path.join(__dirname, '../../../examples/serverless-api-sam.yaml');\n    \n    const template = await parser.parse(samTemplatePath);\n    \n    expect(template).toBeDefined();\n    expect(template.Transform).toBe('AWS::Serverless-2016-10-31');\n    expect(template.Resources).toBeDefined();\n    \n    // SAM特有のリソースを確認\n    const resourceTypes = Object.values(template.Resources).map(r => r.Type);\n    expect(resourceTypes).toContain('AWS::Serverless::Api');\n    expect(resourceTypes).toContain('AWS::Serverless::Function');\n    expect(resourceTypes).toContain('AWS::DynamoDB::Table');\n  });\n\n  // 実際のECSテンプレートテスト\n  it('should parse real ECS container template', async () => {\n    const ecsTemplatePath = path.join(__dirname, '../../../examples/container-microservices-ecs.yaml');\n    \n    const template = await parser.parse(ecsTemplatePath);\n    \n    expect(template).toBeDefined();\n    expect(template.AWSTemplateFormatVersion).toBe('2010-09-09');\n    expect(template.Resources).toBeDefined();\n    \n    // ECS関連リソースを確認\n    const resourceTypes = Object.values(template.Resources).map(r => r.Type);\n    expect(resourceTypes).toContain('AWS::ECS::Cluster');\n    expect(resourceTypes).toContain('AWS::ECS::Service');\n    expect(resourceTypes).toContain('AWS::ElasticLoadBalancingV2::LoadBalancer');\n  });\n\n  // 実際のWebアプリケーションテンプレートテスト\n  it('should parse real web application template', async () => {\n    const webAppTemplatePath = path.join(__dirname, '../../../examples/web-application-stack.yaml');\n    \n    const template = await parser.parse(webAppTemplatePath);\n    \n    expect(template).toBeDefined();\n    expect(template.Resources).toBeDefined();\n    \n    // Web アプリ関連リソースを確認\n    const resourceTypes = Object.values(template.Resources).map(r => r.Type);\n    expect(resourceTypes).toContain('AWS::RDS::DBInstance');\n    expect(resourceTypes).toContain('AWS::ElasticLoadBalancingV2::LoadBalancer');\n    expect(resourceTypes).toContain('AWS::AutoScaling::AutoScalingGroup');\n  });\n\n  // パフォーマンス：複数テンプレート並行解析\n  it('should handle multiple template parsing concurrently', async () => {\n    const templatePaths = [\n      path.join(__dirname, '../../../examples/serverless-api-sam.yaml'),\n      path.join(__dirname, '../../../examples/container-microservices-ecs.yaml'),\n      path.join(__dirname, '../../../examples/web-application-stack.yaml')\n    ];\n\n    const startTime = performance.now();\n    \n    const parsePromises = templatePaths.map(templatePath => \n      parser.parse(templatePath)\n    );\n    \n    const templates = await Promise.all(parsePromises);\n    const duration = performance.now() - startTime;\n    \n    expect(templates).toHaveLength(3);\n    expect(duration).toBeLessThan(3000); // 3秒以内\n    \n    // 全テンプレートが正常解析されていることを確認\n    templates.forEach(template => {\n      expect(template.Resources).toBeDefined();\n      expect(Object.keys(template.Resources).length).toBeGreaterThan(0);\n    });\n  });\n\n  // 型安全性：サポート対象リソースの確認\n  it('should identify supported resources accurately', async () => {\n    const samTemplatePath = path.join(__dirname, '../../../examples/serverless-api-sam.yaml');\n    const template = await parser.parse(samTemplatePath);\n    \n    // 型安全なリソース識別（既実装の型ガード関数使用）\n    const { isSupportedResource } = require('../../../src/types/cloudformation');\n    \n    let supportedCount = 0;\n    let totalCount = 0;\n    \n    for (const [logicalId, resource] of Object.entries(template.Resources)) {\n      totalCount++;\n      if (isSupportedResource(resource)) {\n        supportedCount++;\n      }\n    }\n    \n    expect(supportedCount).toBeGreaterThan(0);\n    expect(totalCount).toBeGreaterThan(supportedCount); // 一部はサポート対象外\n    \n    console.log(`📊 SAMテンプレート: ${supportedCount}/${totalCount} リソースがサポート対象`);\n  });\n\n  // メモリ効率性：大量リソーステンプレート\n  it('should handle large resource count efficiently', async () => {\n    // 500リソースのテンプレート生成\n    const largeTemplate = {\n      AWSTemplateFormatVersion: \"2010-09-09\",\n      Description: \"Large resource count template\",\n      Resources: {} as Record<string, unknown>\n    };\n\n    // サポート対象リソースを混在\n    for (let i = 0; i < 100; i++) {\n      largeTemplate.Resources[`RDS${i}`] = {\n        Type: \"AWS::RDS::DBInstance\",\n        Properties: { Engine: \"mysql\", DBInstanceClass: \"db.t3.micro\" }\n      };\n      largeTemplate.Resources[`Lambda${i}`] = {\n        Type: \"AWS::Lambda::Function\", \n        Properties: { Runtime: \"nodejs20.x\", Handler: \"index.handler\" }\n      };\n      largeTemplate.Resources[`DynamoDB${i}`] = {\n        Type: \"AWS::DynamoDB::Table\",\n        Properties: { BillingMode: \"PAY_PER_REQUEST\" }\n      };\n      largeTemplate.Resources[`S3${i}`] = {\n        Type: \"AWS::S3::Bucket\",\n        Properties: { BucketName: `bucket-${i}` }\n      };\n      largeTemplate.Resources[`EC2${i}`] = {\n        Type: \"AWS::EC2::Instance\",\n        Properties: { InstanceType: \"t3.micro\" }\n      };\n    }\n\n    const largePath = path.join(tempDir, 'large-resources.json');\n    writeFileSync(largePath, JSON.stringify(largeTemplate, null, 2), 'utf8');\n\n    // パフォーマンス測定\n    const startTime = performance.now();\n    const memoryBefore = process.memoryUsage().heapUsed;\n    \n    const template = await parser.parse(largePath);\n    \n    const duration = performance.now() - startTime;\n    const memoryAfter = process.memoryUsage().heapUsed;\n    const memoryDelta = (memoryAfter - memoryBefore) / 1024 / 1024;\n\n    expect(template.Resources).toBeDefined();\n    expect(Object.keys(template.Resources)).toHaveLength(500);\n    expect(duration).toBeLessThan(1000); // 1秒以内\n    expect(memoryDelta).toBeLessThan(50); // メモリ増加50MB以下\n\n    console.log(`⚡ 500リソース解析: ${duration.toFixed(1)}ms, メモリ増加: ${memoryDelta.toFixed(1)}MB`);\n  });\n\n  // エラーレポートの品質テスト\n  it('should provide high-quality error reports', async () => {\n    // 構造的に問題のあるテンプレート\n    const problematicTemplate = `\nAWSTemplateFormatVersion: '2010-09-09'\nResources:\n  InvalidResource:\n    # Typeプロパティが無い\n    Properties:\n      Name: \"test\"\n`;\n    \n    const problematicPath = path.join(tempDir, 'problematic.yaml');\n    writeFileSync(problematicPath, problematicTemplate, 'utf8');\n\n    try {\n      await parser.parse(problematicPath);\n    } catch (error) {\n      // 詳細で有用なエラーレポート\n      expect(error.type).toBe('PARSE_ERROR');\n      expect(error.message).toContain('Type');\n      expect(error.filePath).toBe(problematicPath);\n      \n      const structured = error.toStructuredOutput();\n      expect(structured.details?.nearText).toContain('Type');\n      \n      console.log(`📝 エラーレポート品質: ${structured.message}`);\n    }\n  });\n});\n\n// 統合パフォーマンステスト（BLUE段階リファクタリング検証）\ndescribe('TemplateParser統合パフォーマンス（CLAUDE.md最適化）', () => {\n\n  it('should demonstrate overall parsing efficiency', async () => {\n    const parser = new TemplateParser();\n    const examples = [\n      'serverless-api-sam.yaml',\n      'container-microservices-ecs.yaml', \n      'web-application-stack.yaml'\n    ];\n\n    const results = [];\n    let totalDuration = 0;\n    \n    for (const example of examples) {\n      const templatePath = path.join(__dirname, '../../../examples', example);\n      const startTime = performance.now();\n      \n      const template = await parser.parse(templatePath);\n      const duration = performance.now() - startTime;\n      \n      totalDuration += duration;\n      results.push({\n        file: example,\n        duration: Math.round(duration),\n        resourceCount: Object.keys(template.Resources).length\n      });\n    }\n\n    expect(totalDuration).toBeLessThan(3000); // 全て合わせて3秒以内\n    \n    console.log('📈 解析パフォーマンス結果:');\n    results.forEach(result => {\n      console.log(`   ${result.file}: ${result.duration}ms (${result.resourceCount}リソース)`);\n    });\n    console.log(`   合計: ${Math.round(totalDuration)}ms`);\n  });\n});"],"version":3}