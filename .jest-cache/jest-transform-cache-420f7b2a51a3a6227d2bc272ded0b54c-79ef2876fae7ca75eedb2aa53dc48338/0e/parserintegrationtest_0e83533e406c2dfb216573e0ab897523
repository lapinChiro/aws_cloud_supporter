388ec1c323f7ed72798fe78e468c251e
"use strict";
// CLAUDE.md準拠TemplateParser実テンプレート統合テスト（BLUE段階）
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const parser_1 = require("../../../src/core/parser");
const path_1 = __importDefault(require("path"));
describe('TemplateParser実テンプレート統合（CLAUDE.md: 実用性確認）', () => {
    let parser;
    beforeEach(() => {
        parser = new parser_1.TemplateParser();
    });
    // 実際のサーバーレステンプレートテスト
    it('should parse real serverless SAM template', async () => {
        const samTemplatePath = path_1.default.join(__dirname, '../../../examples/serverless-api-sam.yaml');
        const template = await parser.parse(samTemplatePath);
        expect(template).toBeDefined();
        expect(template.Transform).toBe('AWS::Serverless-2016-10-31');
        expect(template.Resources).toBeDefined();
        // SAM特有のリソースを確認
        const resourceTypes = Object.values(template.Resources).map(r => r.Type);
        expect(resourceTypes).toContain('AWS::Serverless::Api');
        expect(resourceTypes).toContain('AWS::Serverless::Function');
        expect(resourceTypes).toContain('AWS::DynamoDB::Table');
    });
    // 実際のECSテンプレートテスト
    it('should parse real ECS container template', async () => {
        const ecsTemplatePath = path_1.default.join(__dirname, '../../../examples/container-microservices-ecs.yaml');
        const template = await parser.parse(ecsTemplatePath);
        expect(template).toBeDefined();
        expect(template.AWSTemplateFormatVersion).toBe('2010-09-09');
        expect(template.Resources).toBeDefined();
        // ECS関連リソースを確認
        const resourceTypes = Object.values(template.Resources).map(r => r.Type);
        expect(resourceTypes).toContain('AWS::ECS::Cluster');
        expect(resourceTypes).toContain('AWS::ECS::Service');
        expect(resourceTypes).toContain('AWS::ElasticLoadBalancingV2::LoadBalancer');
    });
    // 実際のWebアプリケーションテンプレートテスト
    it('should parse real web application template', async () => {
        const webAppTemplatePath = path_1.default.join(__dirname, '../../../examples/web-application-stack.yaml');
        const template = await parser.parse(webAppTemplatePath);
        expect(template).toBeDefined();
        expect(template.Resources).toBeDefined();
        // Web アプリ関連リソースを確認
        const resourceTypes = Object.values(template.Resources).map(r => r.Type);
        expect(resourceTypes).toContain('AWS::RDS::DBInstance');
        expect(resourceTypes).toContain('AWS::ElasticLoadBalancingV2::LoadBalancer');
        expect(resourceTypes).toContain('AWS::AutoScaling::AutoScalingGroup');
    });
    // パフォーマンス：複数テンプレート並行解析
    it('should handle multiple template parsing concurrently', async () => {
        const templatePaths = [
            path_1.default.join(__dirname, '../../../examples/serverless-api-sam.yaml'),
            path_1.default.join(__dirname, '../../../examples/container-microservices-ecs.yaml'),
            path_1.default.join(__dirname, '../../../examples/web-application-stack.yaml')
        ];
        const startTime = performance.now();
        const parsePromises = templatePaths.map(templatePath => parser.parse(templatePath));
        const templates = await Promise.all(parsePromises);
        const duration = performance.now() - startTime;
        expect(templates).toHaveLength(3);
        expect(duration).toBeLessThan(3000); // 3秒以内
        // 全テンプレートが正常解析されていることを確認
        templates.forEach(template => {
            expect(template.Resources).toBeDefined();
            expect(Object.keys(template.Resources).length).toBeGreaterThan(0);
        });
    });
    // 型安全性：サポート対象リソースの確認
    it('should identify supported resources accurately', async () => {
        const samTemplatePath = path_1.default.join(__dirname, '../../../examples/serverless-api-sam.yaml');
        const template = await parser.parse(samTemplatePath);
        // 型安全なリソース識別（既実装の型ガード関数使用）
        const { isSupportedResource } = require('../../../src/types/cloudformation');
        let supportedCount = 0;
        let totalCount = 0;
        for (const [logicalId, resource] of Object.entries(template.Resources)) {
            totalCount++;
            if (isSupportedResource(resource)) {
                supportedCount++;
            }
        }
        expect(supportedCount).toBeGreaterThan(0);
        expect(totalCount).toBeGreaterThan(supportedCount); // 一部はサポート対象外
        console.log(`📊 SAMテンプレート: ${supportedCount}/${totalCount} リソースがサポート対象`);
    });
    // メモリ効率性：大量リソーステンプレート
    it('should handle large resource count efficiently', async () => {
        // 500リソースのテンプレート生成
        const largeTemplate = {
            AWSTemplateFormatVersion: "2010-09-09",
            Description: "Large resource count template",
            Resources: {}
        };
        // サポート対象リソースを混在
        for (let i = 0; i < 100; i++) {
            largeTemplate.Resources[`RDS${i}`] = {
                Type: "AWS::RDS::DBInstance",
                Properties: { Engine: "mysql", DBInstanceClass: "db.t3.micro" }
            };
            largeTemplate.Resources[`Lambda${i}`] = {
                Type: "AWS::Lambda::Function",
                Properties: { Runtime: "nodejs20.x", Handler: "index.handler" }
            };
            largeTemplate.Resources[`DynamoDB${i}`] = {
                Type: "AWS::DynamoDB::Table",
                Properties: { BillingMode: "PAY_PER_REQUEST" }
            };
            largeTemplate.Resources[`S3${i}`] = {
                Type: "AWS::S3::Bucket",
                Properties: { BucketName: `bucket-${i}` }
            };
            largeTemplate.Resources[`EC2${i}`] = {
                Type: "AWS::EC2::Instance",
                Properties: { InstanceType: "t3.micro" }
            };
        }
        const largePath = path_1.default.join(tempDir, 'large-resources.json');
        writeFileSync(largePath, JSON.stringify(largeTemplate, null, 2), 'utf8');
        // パフォーマンス測定
        const startTime = performance.now();
        const memoryBefore = process.memoryUsage().heapUsed;
        const template = await parser.parse(largePath);
        const duration = performance.now() - startTime;
        const memoryAfter = process.memoryUsage().heapUsed;
        const memoryDelta = (memoryAfter - memoryBefore) / 1024 / 1024;
        expect(template.Resources).toBeDefined();
        expect(Object.keys(template.Resources)).toHaveLength(500);
        expect(duration).toBeLessThan(1000); // 1秒以内
        expect(memoryDelta).toBeLessThan(50); // メモリ増加50MB以下
        console.log(`⚡ 500リソース解析: ${duration.toFixed(1)}ms, メモリ増加: ${memoryDelta.toFixed(1)}MB`);
    });
    // エラーレポートの品質テスト
    it('should provide high-quality error reports', async () => {
        // 構造的に問題のあるテンプレート
        const problematicTemplate = `
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  InvalidResource:
    # Typeプロパティが無い
    Properties:
      Name: "test"
`;
        const problematicPath = path_1.default.join(tempDir, 'problematic.yaml');
        writeFileSync(problematicPath, problematicTemplate, 'utf8');
        try {
            await parser.parse(problematicPath);
        }
        catch (error) {
            // 詳細で有用なエラーレポート
            expect(error.type).toBe('PARSE_ERROR');
            expect(error.message).toContain('Type');
            expect(error.filePath).toBe(problematicPath);
            const structured = error.toStructuredOutput();
            expect(structured.details?.nearText).toContain('Type');
            console.log(`📝 エラーレポート品質: ${structured.message}`);
        }
    });
});
// 統合パフォーマンステスト（BLUE段階リファクタリング検証）
describe('TemplateParser統合パフォーマンス（CLAUDE.md最適化）', () => {
    it('should demonstrate overall parsing efficiency', async () => {
        const parser = new parser_1.TemplateParser();
        const examples = [
            'serverless-api-sam.yaml',
            'container-microservices-ecs.yaml',
            'web-application-stack.yaml'
        ];
        const results = [];
        let totalDuration = 0;
        for (const example of examples) {
            const templatePath = path_1.default.join(__dirname, '../../../examples', example);
            const startTime = performance.now();
            const template = await parser.parse(templatePath);
            const duration = performance.now() - startTime;
            totalDuration += duration;
            results.push({
                file: example,
                duration: Math.round(duration),
                resourceCount: Object.keys(template.Resources).length
            });
        }
        expect(totalDuration).toBeLessThan(3000); // 全て合わせて3秒以内
        console.log('📈 解析パフォーマンス結果:');
        results.forEach(result => {
            console.log(`   ${result.file}: ${result.duration}ms (${result.resourceCount}リソース)`);
        });
        console.log(`   合計: ${Math.round(totalDuration)}ms`);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,