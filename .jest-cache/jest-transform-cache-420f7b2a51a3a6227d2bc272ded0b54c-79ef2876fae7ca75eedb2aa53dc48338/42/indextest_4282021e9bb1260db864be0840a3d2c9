108974fab795a2b5ed89437c29713e9b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// CLAUDE.md準拠サンプルテスト（TDD基盤検証）
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
// T-003検証: テスト環境動作確認
describe('CLI Basic Tests (T-003 Validation)', () => {
    // CLAUDE.md: Zero type errors 検証
    it('should have TypeScript with zero type errors', () => {
        expect(true).toBe(true); // 基本動作確認
    });
    // CLAUDE.md: No any types 検証
    it('should not contain any types in CLI code', () => {
        const cliCode = (0, fs_1.readFileSync)(path_1.default.join(__dirname, '../../../src/cli/index.ts'), 'utf8');
        expect(cliCode).toHaveNoAnyTypes();
    });
    // カスタムマッチャー動作確認
    it('should validate custom matchers work correctly', () => {
        // しきい値検証マッチャー
        const validThreshold = { warning: 70, critical: 90 };
        const invalidThreshold = { warning: 90, critical: 70 };
        expect(validThreshold).toHaveValidThreshold();
        expect(invalidThreshold).not.toHaveValidThreshold();
    });
    // メトリクス検証マッチャー
    it('should validate metrics matcher', () => {
        const metrics = [
            { metric_name: 'CPUUtilization' },
            { metric_name: 'DatabaseConnections' }
        ];
        expect(metrics).toContainMetric('CPUUtilization');
        expect(metrics).not.toContainMetric('NonExistentMetric');
    });
    // CloudFormationリソース検証マッチャー
    it('should validate CloudFormation resource matcher', () => {
        const validResource = {
            Type: 'AWS::RDS::DBInstance',
            Properties: { Engine: 'mysql' }
        };
        const invalidResource = {
            Type: 'InvalidType'
        };
        expect(validResource).toBeValidCloudFormationResource();
        expect(invalidResource).not.toBeValidCloudFormationResource();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUva3lvaGVpL2F3c19jbG91ZF9zdXBwb3J0ZXIvdGVzdHMvdW5pdC9jbGkvaW5kZXgudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDhCQUE4QjtBQUM5QiwyQkFBa0M7QUFDbEMsZ0RBQXdCO0FBRXhCLHFCQUFxQjtBQUNyQixRQUFRLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUFFO0lBQ2xELGlDQUFpQztJQUNqQyxFQUFFLENBQUMsOENBQThDLEVBQUUsR0FBRyxFQUFFO1FBQ3RELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBRUgsNkJBQTZCO0lBQzdCLEVBQUUsQ0FBQywwQ0FBMEMsRUFBRSxHQUFHLEVBQUU7UUFDbEQsTUFBTSxPQUFPLEdBQUcsSUFBQSxpQkFBWSxFQUMxQixjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSwyQkFBMkIsQ0FBQyxFQUNqRCxNQUFNLENBQ1AsQ0FBQztRQUVGLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBRUgsZ0JBQWdCO0lBQ2hCLEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxHQUFHLEVBQUU7UUFDeEQsY0FBYztRQUNkLE1BQU0sY0FBYyxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDckQsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBRXZELE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQzlDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQ3RELENBQUMsQ0FBQyxDQUFDO0lBRUgsZUFBZTtJQUNmLEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7UUFDekMsTUFBTSxPQUFPLEdBQUc7WUFDZCxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRTtZQUNqQyxFQUFFLFdBQVcsRUFBRSxxQkFBcUIsRUFBRTtTQUN2QyxDQUFDO1FBRUYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFFSCw0QkFBNEI7SUFDNUIsRUFBRSxDQUFDLGlEQUFpRCxFQUFFLEdBQUcsRUFBRTtRQUN6RCxNQUFNLGFBQWEsR0FBRztZQUNwQixJQUFJLEVBQUUsc0JBQXNCO1lBQzVCLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUU7U0FDaEMsQ0FBQztRQUVGLE1BQU0sZUFBZSxHQUFHO1lBQ3RCLElBQUksRUFBRSxhQUFhO1NBQ3BCLENBQUM7UUFFRixNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsK0JBQStCLEVBQUUsQ0FBQztRQUN4RCxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLCtCQUErQixFQUFFLENBQUM7SUFDaEUsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9reW9oZWkvYXdzX2Nsb3VkX3N1cHBvcnRlci90ZXN0cy91bml0L2NsaS9pbmRleC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENMQVVERS5tZOa6luaLoOOCteODs+ODl+ODq+ODhuOCueODiO+8iFREROWfuuebpOaknOiovO+8iVxuaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbi8vIFQtMDAz5qSc6Ki8OiDjg4bjgrnjg4jnkrDlooPli5XkvZznorroqo1cbmRlc2NyaWJlKCdDTEkgQmFzaWMgVGVzdHMgKFQtMDAzIFZhbGlkYXRpb24pJywgKCkgPT4ge1xuICAvLyBDTEFVREUubWQ6IFplcm8gdHlwZSBlcnJvcnMg5qSc6Ki8XG4gIGl0KCdzaG91bGQgaGF2ZSBUeXBlU2NyaXB0IHdpdGggemVybyB0eXBlIGVycm9ycycsICgpID0+IHtcbiAgICBleHBlY3QodHJ1ZSkudG9CZSh0cnVlKTsgLy8g5Z+65pys5YuV5L2c56K66KqNXG4gIH0pO1xuXG4gIC8vIENMQVVERS5tZDogTm8gYW55IHR5cGVzIOaknOiovFxuICBpdCgnc2hvdWxkIG5vdCBjb250YWluIGFueSB0eXBlcyBpbiBDTEkgY29kZScsICgpID0+IHtcbiAgICBjb25zdCBjbGlDb2RlID0gcmVhZEZpbGVTeW5jKFxuICAgICAgcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uLy4uL3NyYy9jbGkvaW5kZXgudHMnKSwgXG4gICAgICAndXRmOCdcbiAgICApO1xuICAgIFxuICAgIGV4cGVjdChjbGlDb2RlKS50b0hhdmVOb0FueVR5cGVzKCk7XG4gIH0pO1xuXG4gIC8vIOOCq+OCueOCv+ODoOODnuODg+ODgeODo+ODvOWLleS9nOeiuuiqjVxuICBpdCgnc2hvdWxkIHZhbGlkYXRlIGN1c3RvbSBtYXRjaGVycyB3b3JrIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAvLyDjgZfjgY3jgYTlgKTmpJzoqLzjg57jg4Pjg4Hjg6Pjg7xcbiAgICBjb25zdCB2YWxpZFRocmVzaG9sZCA9IHsgd2FybmluZzogNzAsIGNyaXRpY2FsOiA5MCB9O1xuICAgIGNvbnN0IGludmFsaWRUaHJlc2hvbGQgPSB7IHdhcm5pbmc6IDkwLCBjcml0aWNhbDogNzAgfTtcbiAgICBcbiAgICBleHBlY3QodmFsaWRUaHJlc2hvbGQpLnRvSGF2ZVZhbGlkVGhyZXNob2xkKCk7XG4gICAgZXhwZWN0KGludmFsaWRUaHJlc2hvbGQpLm5vdC50b0hhdmVWYWxpZFRocmVzaG9sZCgpO1xuICB9KTtcblxuICAvLyDjg6Hjg4jjg6rjgq/jgrnmpJzoqLzjg57jg4Pjg4Hjg6Pjg7xcbiAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBtZXRyaWNzIG1hdGNoZXInLCAoKSA9PiB7XG4gICAgY29uc3QgbWV0cmljcyA9IFtcbiAgICAgIHsgbWV0cmljX25hbWU6ICdDUFVVdGlsaXphdGlvbicgfSxcbiAgICAgIHsgbWV0cmljX25hbWU6ICdEYXRhYmFzZUNvbm5lY3Rpb25zJyB9XG4gICAgXTtcbiAgICBcbiAgICBleHBlY3QobWV0cmljcykudG9Db250YWluTWV0cmljKCdDUFVVdGlsaXphdGlvbicpO1xuICAgIGV4cGVjdChtZXRyaWNzKS5ub3QudG9Db250YWluTWV0cmljKCdOb25FeGlzdGVudE1ldHJpYycpO1xuICB9KTtcblxuICAvLyBDbG91ZEZvcm1hdGlvbuODquOCveODvOOCueaknOiovOODnuODg+ODgeODo+ODvFxuICBpdCgnc2hvdWxkIHZhbGlkYXRlIENsb3VkRm9ybWF0aW9uIHJlc291cmNlIG1hdGNoZXInLCAoKSA9PiB7XG4gICAgY29uc3QgdmFsaWRSZXNvdXJjZSA9IHtcbiAgICAgIFR5cGU6ICdBV1M6OlJEUzo6REJJbnN0YW5jZScsXG4gICAgICBQcm9wZXJ0aWVzOiB7IEVuZ2luZTogJ215c3FsJyB9XG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBpbnZhbGlkUmVzb3VyY2UgPSB7XG4gICAgICBUeXBlOiAnSW52YWxpZFR5cGUnXG4gICAgfTtcbiAgICBcbiAgICBleHBlY3QodmFsaWRSZXNvdXJjZSkudG9CZVZhbGlkQ2xvdWRGb3JtYXRpb25SZXNvdXJjZSgpO1xuICAgIGV4cGVjdChpbnZhbGlkUmVzb3VyY2UpLm5vdC50b0JlVmFsaWRDbG91ZEZvcm1hdGlvblJlc291cmNlKCk7XG4gIH0pO1xufSk7Il0sInZlcnNpb24iOjN9