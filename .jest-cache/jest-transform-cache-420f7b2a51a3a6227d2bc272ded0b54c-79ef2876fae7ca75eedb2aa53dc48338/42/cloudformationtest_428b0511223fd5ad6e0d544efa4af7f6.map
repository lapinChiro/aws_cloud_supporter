{"file":"/home/kyohei/aws_cloud_supporter/tests/unit/types/cloudformation.test.ts","mappings":"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","names":[],"sources":["/home/kyohei/aws_cloud_supporter/tests/unit/types/cloudformation.test.ts"],"sourcesContent":["// CLAUDE.md準拠型安全性テスト（RED段階: any型違反検知）\nimport { readFileSync } from 'fs';\nimport path from 'path';\n\ndescribe('CloudFormation型定義（CLAUDE.md: No any types）', () => {\n  \n  // CLAUDE.md核心原則: No any types検証\n  it('should not contain any types in cloudformation.ts', () => {\n    const cloudFormationCode = readFileSync(\n      path.join(__dirname, '../../../src/types/cloudformation.ts'), \n      'utf8'\n    );\n    \n    // any型が含まれていないことを確認\n    expect(cloudFormationCode).toHaveNoAnyTypes();\n  });\n\n  // TypeScript strict mode準拠テスト\n  it('should compile without type errors', async () => {\n    const { execSync } = await import('child_process');\n    \n    try {\n      execSync('npx tsc --noEmit', { encoding: 'utf8', stdio: 'pipe' });\n      // コンパイル成功なら通過\n      expect(true).toBe(true);\n    } catch (error) {\n      // コンパイルエラーがあれば失敗\n      fail(`TypeScript compilation failed: ${error.message}`);\n    }\n  });\n\n  // CloudFormationTemplate型の基本構造テスト\n  it('should define proper CloudFormationTemplate interface', () => {\n    // 型定義のインポートテスト\n    const cfnTypes = require('../../../src/types/cloudformation');\n    \n    // 主要な型が定義されていることを確認\n    expect(cfnTypes).toBeDefined();\n    expect(typeof cfnTypes.ResourceType).toBe('object');\n    expect(typeof cfnTypes.isSupportedResource).toBe('function');\n  });\n\n  // RDSProperties型安全性テスト\n  it('should define type-safe RDSProperties without any types', () => {\n    // 実装後にRDSPropertiesが適切に型定義されているかテスト\n    const testRDSProperties = {\n      DBInstanceClass: 'db.t3.micro',\n      Engine: 'mysql' as const,\n      AllocatedStorage: 20,\n      MultiAZ: true\n    };\n    \n    // 型安全性の検証（型推論が正しく働くかテスト）\n    expect(typeof testRDSProperties.DBInstanceClass).toBe('string');\n    expect(typeof testRDSProperties.Engine).toBe('string');\n    expect(typeof testRDSProperties.AllocatedStorage).toBe('number');\n    expect(typeof testRDSProperties.MultiAZ).toBe('boolean');\n  });\n\n  // Union型の型安全性テスト\n  it('should define proper union types for resource types', () => {\n    const cfnTypes = require('../../../src/types/cloudformation');\n    \n    // SupportedResource Union型の型ガード関数テスト\n    const testResource = {\n      Type: 'AWS::RDS::DBInstance',\n      Properties: { Engine: 'mysql' }\n    };\n    \n    expect(cfnTypes.isSupportedResource(testResource)).toBe(true);\n    expect(cfnTypes.isRDSInstance(testResource)).toBe(true);\n    \n    // 非サポートリソース\n    const unsupportedResource = {\n      Type: 'AWS::EC2::Instance',\n      Properties: {}\n    };\n    \n    expect(cfnTypes.isSupportedResource(unsupportedResource)).toBe(false);\n  });\n\n  // エラー詳細型の安全性テスト\n  it('should define ErrorDetails without any type', () => {\n    // ErrorDetails型がany型を含まずに定義されているかテスト\n    const testErrorDetails = {\n      originalError: 'test error',\n      fileSize: 1024,\n      lineNumber: 42,\n      columnNumber: 10\n    };\n    \n    expect(typeof testErrorDetails.originalError).toBe('string');\n    expect(typeof testErrorDetails.fileSize).toBe('number');\n    expect(typeof testErrorDetails.lineNumber).toBe('number');\n    expect(typeof testErrorDetails.columnNumber).toBe('number');\n  });\n});\n\ndescribe('メトリクス型定義（CLAUDE.md: Type-Driven Development）', () => {\n\n  // MetricDefinition型安全性テスト\n  it('should define type-safe MetricDefinition interface', () => {\n    // 実装前なので失敗する想定\n    const testMetric = {\n      metric_name: 'CPUUtilization',\n      namespace: 'AWS/RDS',\n      unit: 'Percent',\n      description: 'CPU利用率',\n      statistic: 'Average' as const,\n      recommended_threshold: {\n        warning: 70,\n        critical: 90\n      },\n      evaluation_period: 300,\n      category: 'Performance' as const,\n      importance: 'High' as const\n    };\n    \n    // しきい値の型安全性\n    expect(testMetric.recommended_threshold).toHaveValidThreshold();\n    \n    // enum型の型安全性\n    expect(['Average', 'Sum', 'Maximum', 'Minimum']).toContain(testMetric.statistic);\n    expect(['Performance', 'Error', 'Saturation', 'Latency']).toContain(testMetric.category);\n    expect(['High', 'Medium', 'Low']).toContain(testMetric.importance);\n  });\n\n  // MetricConfig型安全性テスト\n  it('should define type-safe MetricConfig interface', () => {\n    const metricsTypes = require('../../../src/types/metrics');\n    \n    // MetricConfig型のテスト用データ\n    const testMetricConfig = {\n      name: 'CPUUtilization',\n      namespace: 'AWS/RDS',\n      unit: 'Percent',\n      description: 'CPU利用率',\n      statistic: 'Average' as const,\n      evaluationPeriod: 300 as const,\n      category: 'Performance' as const,\n      importance: 'High' as const,\n      threshold: {\n        base: 70,\n        warningMultiplier: 1.0,\n        criticalMultiplier: 1.3\n      }\n    };\n    \n    // 基本型安全性確認\n    expect(typeof testMetricConfig.name).toBe('string');\n    expect(typeof testMetricConfig.threshold.base).toBe('number');\n    expect(testMetricConfig.threshold.warningMultiplier < testMetricConfig.threshold.criticalMultiplier).toBe(true);\n  });\n});\n\ndescribe('共通型定義（CLAUDE.md: DRY原則）', () => {\n\n  // 共通型の重複排除テスト\n  it('should define common types without duplication', () => {\n    const commonTypes = require('../../../src/types/common');\n    const metricsTypes = require('../../../src/types/metrics');\n    \n    // 共通型が適切に定義されていることを確認\n    expect(typeof commonTypes.MetricStatistic).toBe('undefined'); // 型なので実行時は存在しない\n    expect(commonTypes).toBeDefined();\n    \n    // メトリクス型で共通型を使用していることを確認\n    expect(metricsTypes).toBeDefined();\n  });\n\n  // 型安全性の包括テスト\n  it('should ensure all types are strictly typed', () => {\n    // common.tsにany型が含まれていないことを確認\n    const commonCode = readFileSync(\n      path.join(__dirname, '../../../src/types/common.ts'), \n      'utf8'\n    );\n    expect(commonCode).toHaveNoAnyTypes();\n    \n    // metrics.tsにany型が含まれていないことを確認\n    const metricsCode = readFileSync(\n      path.join(__dirname, '../../../src/types/metrics.ts'), \n      'utf8'\n    );\n    expect(metricsCode).toHaveNoAnyTypes();\n  });\n});"],"version":3}