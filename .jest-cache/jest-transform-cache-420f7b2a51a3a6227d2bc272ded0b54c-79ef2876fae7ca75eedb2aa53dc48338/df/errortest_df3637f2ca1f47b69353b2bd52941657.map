{"file":"/home/kyohei/aws_cloud_supporter/tests/unit/utils/error.test.ts","mappings":";AAAA,yCAAyC;;;;;AAEzC,2BAAkC;AAClC,gDAAwB;AAExB,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;IAEhD,4BAA4B;IAC5B,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,CAAC,GAAG,EAAE;YACV,OAAO,CAAC,0BAA0B,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,mBAAmB;IACnC,CAAC,CAAC,CAAC;IAEH,uBAAuB;IACvB,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB;IAC5C,CAAC,CAAC,CAAC;IAEH,qCAAqC;IACrC,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB;IAC5C,CAAC,CAAC,CAAC;IAEH,uBAAuB;IACvB,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB;IAC5C,CAAC,CAAC,CAAC;IAEH,oBAAoB;IACpB,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB;IAC5C,CAAC,CAAC,CAAC;IAEH,cAAc;IACd,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,qBAAqB;QACrB,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,IAAA,iBAAY,EAC5B,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,6BAA6B,CAAC,EACnD,MAAM,CACP,CAAC;YACF,MAAM,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACvC,CAAC;QAAC,MAAM,CAAC;YACP,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB;QAC/C,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,mBAAmB;IACnB,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB;IAC5C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IAEzC,0BAA0B;IAC1B,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB;IAC5C,CAAC,CAAC,CAAC;IAEH,wBAAwB;IACxB,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB;IAC5C,CAAC,CAAC,CAAC;IAEH,0BAA0B;IAC1B,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB;IAC5C,CAAC,CAAC,CAAC;IAEH,wBAAwB;IACxB,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB;IAC5C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/kyohei/aws_cloud_supporter/tests/unit/utils/error.test.ts"],"sourcesContent":["// CLAUDE.md準拠エラーハンドリングテスト（RED段階: KISS原則）\n\nimport { readFileSync } from 'fs';\nimport path from 'path';\n\ndescribe('エラーハンドリングシステム（CLAUDE.md: KISS原則）', () => {\n  \n  // RED段階: エラーハンドラが存在しないことを確認\n  it('should fail until ErrorHandler is implemented', () => {\n    expect(() => {\n      require('../../../src/utils/error');\n    }).toThrow(); // まだファイルが存在しないので失敗\n  });\n\n  // エラータイプ列挙テスト（実装前失敗想定）\n  it('should define proper error types', () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // CloudSupporterErrorクラステスト（実装前失敗想定）\n  it('should define CloudSupporterError class', () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // エラーメッセージテスト（実装前失敗想定）\n  it('should provide helpful error messages', () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // 終了コードテスト（実装前失敗想定）\n  it('should set correct exit codes', () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // any型使用禁止テスト\n  it('should not use any types in error handling', () => {\n    // ファイルが存在しないので失敗する想定\n    try {\n      const errorCode = readFileSync(\n        path.join(__dirname, '../../../src/utils/error.ts'),\n        'utf8'\n      );\n      expect(errorCode).toHaveNoAnyTypes();\n    } catch {\n      expect(true).toBe(false); // ファイルなしで失敗（RED段階）\n    }\n  });\n\n  // KISS原則テスト（複雑性回避）\n  it('should keep error handling simple (KISS principle)', () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n});\n\ndescribe('エラー処理フロー（CLAUDE.md: 型安全性）', () => {\n\n  // ファイルエラーハンドリングテスト（実装前失敗）\n  it('should handle file errors properly', () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // 構文エラーハンドリングテスト（実装前失敗）\n  it('should handle parse errors with line numbers', () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // リソースエラーハンドリングテスト（実装前失敗）\n  it('should handle resource errors gracefully', () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // 出力エラーハンドリングテスト（実装前失敗）\n  it('should handle output errors correctly', () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n});"],"version":3}