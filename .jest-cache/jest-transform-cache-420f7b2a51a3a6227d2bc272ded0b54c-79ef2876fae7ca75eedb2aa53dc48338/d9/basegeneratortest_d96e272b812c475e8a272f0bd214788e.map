{"file":"/home/kyohei/aws_cloud_supporter/tests/unit/generators/base.generator.test.ts","mappings":"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","names":[],"sources":["/home/kyohei/aws_cloud_supporter/tests/unit/generators/base.generator.test.ts"],"sourcesContent":["// CLAUDE.md準拠BaseMetricsGeneratorテスト（RED段階: SOLID抽象化原則 + Type-Driven）\n\nimport { readFileSync } from 'fs';\nimport path from 'path';\n\ndescribe('BaseMetricsGenerator抽象クラス（CLAUDE.md: TDD RED段階）', () => {\n\n  // GREEN段階: BaseMetricsGenerator実装確認\n  it('should implement BaseMetricsGenerator successfully', () => {\n    expect(() => {\n      require('../../../src/generators/base.generator');\n    }).not.toThrow(); // 実装完了で成功\n  });\n\n  // 抽象クラス設計テスト（GREEN段階: 実装確認）\n  it('should define proper abstract base class', () => {\n    const { BaseMetricsGenerator } = require('../../../src/generators/base.generator');\n    \n    // 抽象クラスが定義されている確認\n    expect(BaseMetricsGenerator).toBeDefined();\n    expect(typeof BaseMetricsGenerator).toBe('function');\n    \n    // 直接インスタンス化はできない（抽象クラス）\n    expect(() => {\n      new BaseMetricsGenerator();\n    }).toThrow();\n  });\n\n  // IMetricsGeneratorインターフェース実装テスト（GREEN段階: インターフェース確認）\n  it('should implement IMetricsGenerator interface', () => {\n    const { BaseMetricsGenerator } = require('../../../src/generators/base.generator');\n    \n    // プロトタイプにgenerateメソッドがあることを確認\n    expect(BaseMetricsGenerator.prototype.generate).toBeDefined();\n    expect(typeof BaseMetricsGenerator.prototype.generate).toBe('function');\n    \n    // 抽象メソッドが定義されている確認（実装は子クラスで）\n    const prototype = BaseMetricsGenerator.prototype;\n    expect(typeof prototype.getSupportedTypes).toBe('undefined'); // 抽象メソッド\n  });\n\n  // テスト用具象クラス作成（動作確認用）\n  class TestMetricsGenerator extends (require('../../../src/generators/base.generator').BaseMetricsGenerator) {\n    constructor() {\n      const { createLogger } = require('../../../src/utils/logger');\n      super(createLogger('error'));\n    }\n\n    getSupportedTypes(): string[] {\n      return ['AWS::Test::Resource'];\n    }\n\n    protected getMetricsConfig() {\n      return [\n        {\n          name: 'TestMetric',\n          namespace: 'AWS/Test',\n          unit: 'Count',\n          description: 'Test metric',\n          statistic: 'Average' as const,\n          evaluationPeriod: 300 as const,\n          category: 'Performance' as const,\n          importance: 'High' as const,\n          threshold: {\n            base: 100,\n            warningMultiplier: 1.0,\n            criticalMultiplier: 1.5\n          }\n        }\n      ];\n    }\n\n    protected getResourceScale() {\n      return 1.0;\n    }\n  }\n\n  // 動的しきい値計算テスト（GREEN段階: 計算確認）\n  it('should calculate dynamic thresholds correctly', async () => {\n    const testGenerator = new TestMetricsGenerator();\n    const testResource = {\n      Type: 'AWS::Test::Resource',\n      Properties: {},\n      LogicalId: 'TestResource'\n    };\n\n    const metrics = await testGenerator.generate(testResource);\n    \n    expect(metrics).toHaveLength(1);\n    const metric = metrics[0];\n    \n    // しきい値計算確認\n    expect(metric.recommended_threshold).toHaveValidThreshold();\n    expect(metric.recommended_threshold.warning).toBe(100); // 100 * 1.0 * 1.0\n    expect(metric.recommended_threshold.critical).toBe(150); // 100 * 1.0 * 1.5\n  });\n\n  // リソーススケール係数計算テスト（GREEN段階: スケール反映確認）\n  it('should compute resource scale factors', async () => {\n    // スケール係数2.0のテストジェネレータ\n    class ScaledTestGenerator extends TestMetricsGenerator {\n      protected getResourceScale() {\n        return 2.0; // 2倍スケール\n      }\n    }\n\n    const scaledGenerator = new ScaledTestGenerator();\n    const testResource = {\n      Type: 'AWS::Test::Resource',\n      Properties: {},\n      LogicalId: 'ScaledTestResource'\n    };\n\n    const metrics = await scaledGenerator.generate(testResource);\n    const metric = metrics[0];\n    \n    // スケール係数が反映されている確認\n    expect(metric.recommended_threshold.warning).toBe(200); // 100 * 2.0 * 1.0\n    expect(metric.recommended_threshold.critical).toBe(300); // 100 * 2.0 * 1.5\n  });\n\n  // メトリクス生成パフォーマンステスト（GREEN段階: 性能確認）\n  it('should generate metrics within 1 second', async () => {\n    const testGenerator = new TestMetricsGenerator();\n    const testResource = {\n      Type: 'AWS::Test::Resource',\n      Properties: {},\n      LogicalId: 'PerformanceTestResource'\n    };\n\n    const startTime = performance.now();\n    const metrics = await testGenerator.generate(testResource);\n    const duration = performance.now() - startTime;\n    \n    expect(duration).toBeLessThan(1000); // 1秒以内\n    expect(metrics).toHaveLength(1);\n  });\n\n  // 適用可能メトリクス判定テスト（GREEN段階: フィルタリング確認）\n  it('should filter applicable metrics correctly', async () => {\n    // 条件付きメトリクス用テストジェネレータ\n    class ConditionalTestGenerator extends TestMetricsGenerator {\n      protected getMetricsConfig() {\n        return [\n          {\n            name: 'AlwaysApplicable',\n            namespace: 'AWS/Test',\n            unit: 'Count',\n            description: 'Always applicable metric',\n            statistic: 'Average' as const,\n            evaluationPeriod: 300 as const,\n            category: 'Performance' as const,\n            importance: 'High' as const,\n            threshold: { base: 50, warningMultiplier: 1.0, criticalMultiplier: 2.0 }\n          },\n          {\n            name: 'ConditionalMetric',\n            namespace: 'AWS/Test',\n            unit: 'Count',\n            description: 'Conditional metric',\n            statistic: 'Average' as const,\n            evaluationPeriod: 300 as const,\n            category: 'Performance' as const,\n            importance: 'Medium' as const,\n            threshold: { base: 75, warningMultiplier: 1.0, criticalMultiplier: 2.0 },\n            applicableWhen: (resource) => {\n              return resource.LogicalId === 'ConditionalTestResource';\n            }\n          }\n        ];\n      }\n    }\n\n    const conditionalGenerator = new ConditionalTestGenerator();\n    \n    // 条件に合致するリソース\n    const matchingResource = {\n      Type: 'AWS::Test::Resource',\n      Properties: {},\n      LogicalId: 'ConditionalTestResource'\n    };\n\n    const matchingMetrics = await conditionalGenerator.generate(matchingResource);\n    expect(matchingMetrics).toHaveLength(2); // 両方適用\n    \n    // 条件に合致しないリソース\n    const nonMatchingResource = {\n      Type: 'AWS::Test::Resource',\n      Properties: {},\n      LogicalId: 'NonMatchingResource'\n    };\n\n    const nonMatchingMetrics = await conditionalGenerator.generate(nonMatchingResource);\n    expect(nonMatchingMetrics).toHaveLength(1); // 条件なしのみ適用\n  });\n\n  // CloudWatchディメンション構築テスト（GREEN段階: AWS仕様準拠確認）\n  it('should build CloudWatch dimensions properly', async () => {\n    const testGenerator = new TestMetricsGenerator();\n    const testResource = {\n      Type: 'AWS::Test::Resource',\n      Properties: {},\n      LogicalId: 'DimensionTestResource'\n    };\n\n    const metrics = await testGenerator.generate(testResource);\n    const metric = metrics[0];\n    \n    // ディメンション構築確認\n    expect(metric.dimensions).toBeDefined();\n    expect(metric.dimensions).toHaveLength(1);\n    \n    if (metric.dimensions && metric.dimensions.length > 0) {\n      const dimension = metric.dimensions[0];\n      expect(dimension.name).toBe('ResourceId'); // Test::Resourceはマップにないのでデフォルト\n      expect(dimension.value).toBe('DimensionTestResource');\n    }\n  });\n\n  // CLAUDE.md: No any types検証\n  it('should not use any types in base generator implementation', () => {\n    const baseGeneratorCode = readFileSync(\n      path.join(__dirname, '../../../src/generators/base.generator.ts'),\n      'utf8'\n    );\n    expect(baseGeneratorCode).toHaveNoAnyTypes();\n  });\n\n  // 抽象メソッド定義テスト（GREEN段階: 必須メソッド確認）\n  it('should define required abstract methods', () => {\n    const { BaseMetricsGenerator } = require('../../../src/generators/base.generator');\n    \n    // 抽象クラス自体にはない（子クラスで実装）\n    expect(BaseMetricsGenerator.prototype.getSupportedTypes).toBeUndefined();\n    expect(BaseMetricsGenerator.prototype.getMetricsConfig).toBeUndefined();\n    expect(BaseMetricsGenerator.prototype.getResourceScale).toBeUndefined();\n    \n    // 具象実装を持つメソッド\n    expect(BaseMetricsGenerator.prototype.generate).toBeDefined();\n  });\n\n  // エラーハンドリング統合テスト（GREEN段階: CloudSupporterError統合確認）\n  it('should integrate with CloudSupporterError system', async () => {\n    const testGenerator = new TestMetricsGenerator();\n    const invalidResource = {\n      Type: 'AWS::Invalid::Resource', // サポート対象外\n      Properties: {},\n      LogicalId: 'InvalidResource'\n    };\n\n    // サポート対象外リソースでエラー\n    await expect(testGenerator.generate(invalidResource)).rejects.toThrow();\n    \n    try {\n      await testGenerator.generate(invalidResource);\n    } catch (error) {\n      expect(error.type).toBe('RESOURCE_ERROR');\n      expect(error.message).toContain('Unsupported resource type');\n    }\n  });\n});\n\ndescribe('BaseMetricsGenerator動的しきい値（CLAUDE.md: アルゴリズム要件）', () => {\n  \n  // テスト用具象クラス\n  class ThresholdTestGenerator extends (require('../../../src/generators/base.generator').BaseMetricsGenerator) {\n    constructor() {\n      const { createLogger } = require('../../../src/utils/logger');\n      super(createLogger('error'));\n    }\n\n    getSupportedTypes(): string[] {\n      return ['AWS::Test::Threshold'];\n    }\n\n    protected getMetricsConfig() {\n      return [\n        {\n          name: 'ThresholdTestMetric',\n          namespace: 'AWS/Test',\n          unit: 'Percent',\n          description: 'Threshold calculation test',\n          statistic: 'Average' as const,\n          evaluationPeriod: 300 as const,\n          category: 'Performance' as const,\n          importance: 'High' as const,\n          threshold: {\n            base: 80,\n            warningMultiplier: 0.875, // 70%\n            criticalMultiplier: 1.25   // 100%\n          }\n        }\n      ];\n    }\n\n    protected getResourceScale() {\n      return 2.0; // 2倍スケール\n    }\n  }\n\n  // しきい値計算アルゴリズムテスト（GREEN段階: 数式確認）\n  it('should implement threshold calculation algorithm', async () => {\n    const thresholdGenerator = new ThresholdTestGenerator();\n    const testResource = {\n      Type: 'AWS::Test::Threshold',\n      Properties: {},\n      LogicalId: 'ThresholdTestResource'\n    };\n\n    const metrics = await thresholdGenerator.generate(testResource);\n    const metric = metrics[0];\n    \n    // 計算式: base * scale * multiplier\n    // warning: 80 * 2.0 * 0.875 = 140\n    // critical: 80 * 2.0 * 1.25 = 200\n    expect(metric.recommended_threshold.warning).toBe(140);\n    expect(metric.recommended_threshold.critical).toBe(200);\n  });\n\n  // スケール係数反映テスト（GREEN段階: スケール計算確認）\n  it('should apply resource scale factors to thresholds', async () => {\n    // 異なるスケール係数のジェネレータ\n    class VariableScaleGenerator extends ThresholdTestGenerator {\n      constructor(private scale: number) {\n        super();\n      }\n      \n      protected getResourceScale() {\n        return this.scale;\n      }\n    }\n\n    const scales = [0.5, 1.0, 1.5, 3.0];\n    const testResource = {\n      Type: 'AWS::Test::Threshold',\n      Properties: {},\n      LogicalId: 'VariableScaleResource'\n    };\n\n    for (const scale of scales) {\n      const generator = new VariableScaleGenerator(scale);\n      const metrics = await generator.generate(testResource);\n      const metric = metrics[0];\n      \n      const expectedWarning = Math.round(80 * scale * 0.875);\n      const expectedCritical = Math.round(80 * scale * 1.25);\n      \n      expect(metric.recommended_threshold.warning).toBe(expectedWarning);\n      expect(metric.recommended_threshold.critical).toBe(expectedCritical);\n    }\n  });\n\n  // しきい値妥当性検証テスト（GREEN段階: 自動修正確認）\n  it('should ensure warning < critical threshold validity', async () => {\n    // 不正な乗数でwarning >= criticalになる設定\n    class InvalidThresholdGenerator extends ThresholdTestGenerator {\n      protected getMetricsConfig() {\n        return [\n          {\n            name: 'InvalidThresholdMetric',\n            namespace: 'AWS/Test',\n            unit: 'Percent',\n            description: 'Invalid threshold test',\n            statistic: 'Average' as const,\n            evaluationPeriod: 300 as const,\n            category: 'Performance' as const,\n            importance: 'High' as const,\n            threshold: {\n              base: 100,\n              warningMultiplier: 1.5, // warning=150\n              criticalMultiplier: 1.2  // critical=120 (不正)\n            }\n          }\n        ];\n      }\n    }\n\n    const invalidGenerator = new InvalidThresholdGenerator();\n    const testResource = {\n      Type: 'AWS::Test::Threshold',\n      Properties: {},\n      LogicalId: 'InvalidThresholdResource'\n    };\n\n    const metrics = await invalidGenerator.generate(testResource);\n    const metric = metrics[0];\n    \n    // 自動修正により warning < critical が保証される\n    expect(metric.recommended_threshold).toHaveValidThreshold();\n    expect(metric.recommended_threshold.critical).toBeGreaterThan(metric.recommended_threshold.warning);\n  });\n\n  // 数値精度テスト（GREEN段階: 丸め処理確認）\n  it('should maintain numerical precision in calculations', async () => {\n    // 小数点を含む計算のテスト\n    class PrecisionTestGenerator extends ThresholdTestGenerator {\n      protected getMetricsConfig() {\n        return [\n          {\n            name: 'PrecisionTestMetric',\n            namespace: 'AWS/Test',\n            unit: 'Seconds',\n            description: 'Precision test metric',\n            statistic: 'Average' as const,\n            evaluationPeriod: 300 as const,\n            category: 'Latency' as const,\n            importance: 'High' as const,\n            threshold: {\n              base: 0.1234, // 小数点\n              warningMultiplier: 1.234,\n              criticalMultiplier: 2.567\n            }\n          }\n        ];\n      }\n\n      protected getResourceScale() {\n        return 1.789; // 小数点スケール\n      }\n    }\n\n    const precisionGenerator = new PrecisionTestGenerator();\n    const testResource = {\n      Type: 'AWS::Test::Threshold',\n      Properties: {},\n      LogicalId: 'PrecisionTestResource'\n    };\n\n    const metrics = await precisionGenerator.generate(testResource);\n    const metric = metrics[0];\n    \n    // 丸め処理により整数値になっている確認\n    expect(Number.isInteger(metric.recommended_threshold.warning)).toBe(true);\n    expect(Number.isInteger(metric.recommended_threshold.critical)).toBe(true);\n    expect(metric.recommended_threshold.warning).toBeGreaterThan(0);\n    expect(metric.recommended_threshold.critical).toBeGreaterThan(0);\n  });\n\n  // 境界値テスト（GREEN段階: エッジケース確認）\n  it('should handle edge cases in threshold calculation', async () => {\n    class EdgeCaseTestGenerator extends ThresholdTestGenerator {\n      protected getMetricsConfig() {\n        return [\n          {\n            name: 'EdgeCaseMetric',\n            namespace: 'AWS/Test',\n            unit: 'Count',\n            description: 'Edge case test',\n            statistic: 'Average' as const,\n            evaluationPeriod: 300 as const,\n            category: 'Performance' as const,\n            importance: 'High' as const,\n            threshold: {\n              base: 1, // 最小基準値\n              warningMultiplier: 1.0,\n              criticalMultiplier: 2.0\n            }\n          }\n        ];\n      }\n\n      protected getResourceScale() {\n        return 0.1; // 極小スケール\n      }\n    }\n\n    const edgeCaseGenerator = new EdgeCaseTestGenerator();\n    const testResource = {\n      Type: 'AWS::Test::Threshold',\n      Properties: {},\n      LogicalId: 'EdgeCaseResource'\n    };\n\n    const metrics = await edgeCaseGenerator.generate(testResource);\n    const metric = metrics[0];\n    \n    // 極小値でも適切に処理される確認\n    expect(metric.recommended_threshold.warning).toBeGreaterThan(0);\n    expect(metric.recommended_threshold.critical).toBeGreaterThan(metric.recommended_threshold.warning);\n    \n    // Math.round処理により1未満でも適切な値\n    expect(metric.recommended_threshold.warning).toBe(0); // Math.round(1 * 0.1 * 1.0) = 0\n    expect(metric.recommended_threshold.critical).toBe(1); // Math.round(0 * 1.5) = 1 (自動修正)\n  });\n});\n\ndescribe('BaseMetricsGeneratorパフォーマンス（CLAUDE.md: 性能要件）', () => {\n  \n  // テスト用高速ジェネレータ\n  class PerformanceTestGenerator extends (require('../../../src/generators/base.generator').BaseMetricsGenerator) {\n    constructor() {\n      const { createLogger } = require('../../../src/utils/logger');\n      super(createLogger('error'));\n    }\n\n    getSupportedTypes(): string[] {\n      return ['AWS::Test::Performance'];\n    }\n\n    protected getMetricsConfig() {\n      return [\n        {\n          name: 'FastMetric',\n          namespace: 'AWS/Test',\n          unit: 'Count',\n          description: 'Fast generation test',\n          statistic: 'Average' as const,\n          evaluationPeriod: 300 as const,\n          category: 'Performance' as const,\n          importance: 'High' as const,\n          threshold: { base: 100, warningMultiplier: 1.0, criticalMultiplier: 2.0 }\n        }\n      ];\n    }\n\n    protected getResourceScale() {\n      return 1.0;\n    }\n  }\n\n  // 1秒以内生成要件テスト（GREEN段階: 実パフォーマンス確認）\n  it('should generate metrics within performance limits', async () => {\n    const { MetricsGenerationMonitor } = require('../../../src/generators/base.generator');\n    const performanceGenerator = new PerformanceTestGenerator();\n    \n    const testResource = {\n      Type: 'AWS::Test::Performance',\n      Properties: {},\n      LogicalId: 'PerformanceTestResource'\n    };\n\n    const result = await MetricsGenerationMonitor.measureGenerationPerformance(performanceGenerator, testResource);\n    \n    expect(result.metrics).toHaveLength(1);\n    expect(result.stats.generationTimeMs).toBeLessThan(1000); // 1秒以内\n    expect(result.performanceGrade).not.toBe('F'); // 要件達成\n  });\n\n  // メモリ効率テスト（GREEN段階: リークなし確認）\n  it('should generate metrics without memory leaks', async () => {\n    const performanceGenerator = new PerformanceTestGenerator();\n    const testResource = {\n      Type: 'AWS::Test::Performance',\n      Properties: {},\n      LogicalId: 'MemoryTestResource'\n    };\n\n    const memoryBefore = process.memoryUsage().heapUsed;\n    \n    // 100回生成\n    for (let i = 0; i < 100; i++) {\n      await performanceGenerator.generate(testResource);\n    }\n    \n    const memoryAfter = process.memoryUsage().heapUsed;\n    const memoryDelta = (memoryAfter - memoryBefore) / 1024 / 1024;\n    \n    expect(memoryDelta).toBeLessThan(5); // メモリ増加5MB以下\n  });\n\n  // 並行生成テスト（GREEN段階: 同期安全性確認）\n  it('should support concurrent metric generation', async () => {\n    const performanceGenerator = new PerformanceTestGenerator();\n    const testResources = Array.from({ length: 10 }, (_, i) => ({\n      Type: 'AWS::Test::Performance',\n      Properties: {},\n      LogicalId: `ConcurrentTestResource${i}`\n    }));\n\n    // 並行生成\n    const promises = testResources.map(resource => \n      performanceGenerator.generate(resource)\n    );\n\n    const results = await Promise.all(promises);\n    \n    // 全て成功し、一貫した結果\n    expect(results).toHaveLength(10);\n    results.forEach(metrics => {\n      expect(metrics).toHaveLength(1);\n      expect(metrics[0].metric_name).toBe('FastMetric');\n    });\n  });\n\n  // パフォーマンス監視テスト（GREEN段階: 監視機能確認）\n  it('should provide performance monitoring', async () => {\n    const { MetricsGenerationMonitor } = require('../../../src/generators/base.generator');\n    const performanceGenerator = new PerformanceTestGenerator();\n    \n    const testResource = {\n      Type: 'AWS::Test::Performance',\n      Properties: {},\n      LogicalId: 'MonitoringTestResource'\n    };\n\n    const result = await MetricsGenerationMonitor.measureGenerationPerformance(performanceGenerator, testResource);\n    \n    // 統計情報確認\n    expect(result.stats.resourceType).toBe('AWS::Test::Performance');\n    expect(result.stats.metricsGenerated).toBe(1);\n    expect(result.stats.generationTimeMs).toBeGreaterThanOrEqual(0);\n    expect(result.stats.averageThresholdWarning).toBeGreaterThan(0);\n    expect(result.stats.averageThresholdCritical).toBeGreaterThan(0);\n    \n    // パフォーマンス評価\n    expect(['A', 'B', 'C', 'F']).toContain(result.performanceGrade);\n  });\n});\n\ndescribe('BaseMetricsGenerator型安全性（CLAUDE.md: Type-Driven Development）', () => {\n\n  // CloudFormationResource型統合テスト（実装前失敗想定）\n  it('should work with CloudFormationResource types', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // MetricDefinition型生成テスト（実装前失敗想定）\n  it('should generate type-safe MetricDefinition objects', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // MetricConfig型処理テスト（実装前失敗想定）\n  it('should process MetricConfig types safely', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // 型安全なGenerics使用テスト（実装前失敗想定）\n  it('should utilize type-safe generics properly', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // 条件付きメトリクス型安全性テスト（実装前失敗想定）\n  it('should handle applicableWhen functions type-safely', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n});\n\ndescribe('BaseMetricsGeneratorSOLID原則（CLAUDE.md: 設計原則）', () => {\n\n  // 単一責任原則テスト（実装前失敗想定）\n  it('should follow Single Responsibility Principle', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // 開放閉鎖原則テスト（実装前失敗想定）\n  it('should follow Open/Closed Principle', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // インターフェース分離テスト（実装前失敗想定）\n  it('should follow Interface Segregation Principle', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // 依存関係逆転テスト（実装前失敗想定）\n  it('should follow Dependency Inversion Principle', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // リスコフ置換原則テスト（実装前失敗想定）\n  it('should follow Liskov Substitution Principle', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n});"],"version":3}