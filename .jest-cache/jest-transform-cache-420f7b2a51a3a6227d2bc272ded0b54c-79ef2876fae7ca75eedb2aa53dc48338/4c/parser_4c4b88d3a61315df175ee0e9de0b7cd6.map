{"file":"/home/kyohei/aws_cloud_supporter/src/core/parser.ts","mappings":"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","names":[],"sources":["/home/kyohei/aws_cloud_supporter/src/core/parser.ts"],"sourcesContent":["// CLAUDE.md準拠TemplateParser（Don't Reinvent the Wheel + Type-Driven Development）\n\nimport { parse as parseYAML } from 'yaml';\nimport { CloudFormationTemplate } from '../types/cloudformation';\nimport { \n  CloudSupporterError, \n  createFileError, \n  createParseError \n} from '../utils/error';\nimport { ITemplateParser } from '../types/metrics';\n\n// UNIX Philosophy: 一つのことをうまくやる（CloudFormation解析のみ）\nexport class TemplateParser implements ITemplateParser {\n  \n  // メイン解析メソッド（型安全性重視）\n  async parse(filePath: string): Promise<CloudFormationTemplate> {\n    try {\n      // 1. ファイル検証（CLAUDE.md: Type-Driven Development）\n      await this.validateFile(filePath);\n      \n      // 2. ファイル読み込み（パフォーマンス監視）\n      const content = await this.readFile(filePath);\n      \n      // 3. フォーマット判定・解析（Don't Reinvent: yamlライブラリ使用）\n      const template = this.parseContent(content, filePath);\n      \n      // 4. CloudFormation構造検証\n      this.validateTemplateStructure(template, filePath);\n      \n      return template;\n    } catch (error) {\n      // 既存エラーハンドリングシステム活用\n      if (error instanceof CloudSupporterError) {\n        throw error;\n      }\n      throw createFileError(\n        `Failed to parse template: ${(error as Error).message}`,\n        filePath,\n        { originalError: (error as Error).message }\n      );\n    }\n  }\n\n  // ファイル存在・サイズ・権限検証（型安全性）\n  private async validateFile(filePath: string): Promise<void> {\n    const fs = await import('fs/promises');\n    \n    try {\n      const stats = await fs.stat(filePath);\n      \n      // ファイル種別確認\n      if (!stats.isFile()) {\n        throw createFileError(\n          `Path is not a file: ${filePath}`,\n          filePath\n        );\n      }\n      \n      // サイズ制限確認（50MB）\n      const maxSize = 50 * 1024 * 1024; // 50MB\n      if (stats.size > maxSize) {\n        throw createFileError(\n          `File too large: ${(stats.size / 1024 / 1024).toFixed(1)}MB (max: 50MB)`,\n          filePath,\n          { fileSize: stats.size }\n        );\n      }\n    } catch (error) {\n      if (error instanceof CloudSupporterError) throw error;\n      \n      // ファイルアクセスエラー（ENOENT等）\n      const nodeError = error as NodeJS.ErrnoException;\n      throw createFileError(\n        `Cannot access file: ${nodeError.code}`,\n        filePath,\n        nodeError.code ? { error: nodeError.code } : {}\n      );\n    }\n  }\n\n  // ファイル読み込み（時間制限・メモリ効率）\n  private async readFile(filePath: string): Promise<string> {\n    const fs = await import('fs/promises');\n    \n    try {\n      const startTime = performance.now();\n      const content = await fs.readFile(filePath, 'utf8');\n      const duration = performance.now() - startTime;\n      \n      // 読み込み時間制限（5秒）\n      if (duration > 5000) {\n        throw createFileError(\n          `File reading timeout: ${duration.toFixed(0)}ms (max: 5000ms)`,\n          filePath,\n          { duration: Math.round(duration) }\n        );\n      }\n      \n      return content;\n    } catch (error) {\n      if (error instanceof CloudSupporterError) throw error;\n      \n      const nodeError = error as NodeJS.ErrnoException;\n      throw createFileError(\n        `Failed to read file: ${nodeError.message}`,\n        filePath,\n        { originalError: nodeError.message }\n      );\n    }\n  }\n\n  // コンテンツ解析（CLAUDE.md: Don't Reinvent the Wheel）\n  private parseContent(content: string, filePath: string): CloudFormationTemplate {\n    const isJSON = filePath.toLowerCase().endsWith('.json');\n    \n    try {\n      if (isJSON) {\n        // JSON解析（標準JSON.parse使用）\n        return JSON.parse(content) as CloudFormationTemplate;\n      } else {\n        // YAML解析（yamlライブラリ使用）\n        return parseYAML(content) as CloudFormationTemplate;\n      }\n    } catch (error) {\n      // 構文エラー詳細抽出\n      const errorDetails = this.extractSyntaxError(error as Error, content, isJSON);\n      throw createParseError(\n        `${isJSON ? 'JSON' : 'YAML'} syntax error: ${(error as Error).message}`,\n        filePath,\n        errorDetails.lineNumber,\n        errorDetails\n      );\n    }\n  }\n\n  // 構文エラー詳細抽出（型安全、CLAUDE.md: No any types）\n  private extractSyntaxError(\n    error: Error, \n    content: string, \n    isJSON: boolean\n  ): { lineNumber?: number; columnNumber?: number; nearText?: string } {\n    \n    if (isJSON && error instanceof SyntaxError) {\n      // JSON構文エラー詳細抽出（型安全性）\n      const positionMatch = error.message.match(/position (\\d+)/);\n      if (positionMatch?.[1]) {\n        const position = parseInt(positionMatch[1], 10);\n        const lines = content.substring(0, position).split('\\n');\n        const lineNumber = lines.length;\n        const columnNumber = lines[lines.length - 1]?.length || 0;\n        const nearText = content.substring(\n          Math.max(0, position - 50), \n          Math.min(content.length, position + 50)\n        );\n        \n        return { lineNumber, columnNumber, nearText };\n      }\n    } else if (!isJSON) {\n      // YAML構文エラー詳細（yamlライブラリエラー、型安全性）\n      const yamlError = error as { linePos?: Array<{ line?: number; col?: number; text?: string }> };\n      const pos = yamlError.linePos?.[0];\n      if (pos) {\n        const result: { lineNumber?: number; columnNumber?: number; nearText?: string } = {};\n        if (pos.line !== undefined) result.lineNumber = pos.line;\n        if (pos.col !== undefined) result.columnNumber = pos.col;\n        if (pos.text !== undefined) result.nearText = pos.text;\n        return result;\n      }\n    }\n    \n    // フォールバック（基本的なエラー情報のみ）\n    return {\n      nearText: error.message\n    };\n  }\n\n  // CloudFormation構造検証（型安全性）\n  private validateTemplateStructure(template: unknown, filePath: string): void {\n    // 基本オブジェクト検証\n    if (!template || typeof template !== 'object') {\n      throw createParseError(\n        'Template must be a valid object',\n        filePath\n      );\n    }\n\n    const cfnTemplate = template as Record<string, unknown>;\n\n    // Resources セクション必須検証\n    if (!cfnTemplate.Resources || typeof cfnTemplate.Resources !== 'object') {\n      throw createParseError(\n        'Template must contain \"Resources\" section',\n        filePath,\n        undefined,\n        {\n          nearText: 'CloudFormation template requires \"Resources\" section with at least one resource'\n        }\n      );\n    }\n\n    // AWSTemplateFormatVersion 警告（必須ではないが推奨）\n    if (!cfnTemplate.AWSTemplateFormatVersion) {\n      console.warn('\\x1b[33m⚠️  Missing AWSTemplateFormatVersion, assuming 2010-09-09\\x1b[0m');\n    }\n\n    // Resourcesが空でないことを確認\n    const resources = cfnTemplate.Resources as Record<string, unknown>;\n    if (Object.keys(resources).length === 0) {\n      throw createParseError(\n        'Template Resources section is empty',\n        filePath,\n        undefined,\n        { \n          nearText: 'CloudFormation template must contain at least one resource definition'\n        }\n      );\n    }\n\n    // 各リソースの基本構造検証\n    for (const [logicalId, resource] of Object.entries(resources)) {\n      if (!resource || typeof resource !== 'object') {\n        throw createParseError(\n          `Resource \"${logicalId}\" must be an object`,\n          filePath,\n          undefined,\n          { nearText: `Resource ${logicalId} has invalid structure` }\n        );\n      }\n\n      const resourceObj = resource as Record<string, unknown>;\n      if (!resourceObj.Type || typeof resourceObj.Type !== 'string') {\n        throw createParseError(\n          `Resource \"${logicalId}\" missing required \"Type\" property`,\n          filePath,\n          undefined,\n          { nearText: `Resource ${logicalId} must have a Type property (e.g., \"AWS::S3::Bucket\")` }\n        );\n      }\n    }\n  }\n}\n\n// ファイル読み込み専用ユーティリティ（CLAUDE.md: UNIX Philosophy）\nexport class FileReader {\n  \n  // 静的メソッド（状態を持たないシンプル設計）\n  static async readText(filePath: string): Promise<string> {\n    try {\n      const fs = await import('fs/promises');\n      return await fs.readFile(filePath, 'utf8');\n    } catch (error) {\n      const nodeError = error as NodeJS.ErrnoException;\n      throw createFileError(\n        `Failed to read file: ${nodeError.message}`,\n        filePath,\n        nodeError.code ? { error: nodeError.code } : {}\n      );\n    }\n  }\n\n  // ファイル統計情報取得\n  static async getStats(filePath: string): Promise<{ size: number; isFile: boolean }> {\n    try {\n      const fs = await import('fs/promises');\n      const stats = await fs.stat(filePath);\n      return {\n        size: stats.size,\n        isFile: stats.isFile()\n      };\n    } catch (error) {\n      const nodeError = error as NodeJS.ErrnoException;\n      throw createFileError(\n        `Cannot access file: ${nodeError.code}`,\n        filePath,\n        nodeError.code ? { error: nodeError.code } : {}\n      );\n    }\n  }\n}\n\n// 型安全なファイル形式検証（CLAUDE.md: Type-Driven Development）\nexport function isJSONFile(filePath: string): boolean {\n  return filePath.toLowerCase().endsWith('.json');\n}\n\nexport function isYAMLFile(filePath: string): boolean {\n  const lowerPath = filePath.toLowerCase();\n  return lowerPath.endsWith('.yaml') || lowerPath.endsWith('.yml');\n}\n\nexport function isSupportedTemplateFile(filePath: string): boolean {\n  return isJSONFile(filePath) || isYAMLFile(filePath);\n}"],"version":3}