{"file":"/home/kyohei/aws_cloud_supporter/tests/unit/core/parser.test.ts","mappings":"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","names":[],"sources":["/home/kyohei/aws_cloud_supporter/tests/unit/core/parser.test.ts"],"sourcesContent":["// CLAUDE.md準拠TemplateParserテスト（GREEN段階: Don't Reinvent the Wheel + Type-Driven）\n\nimport { readFileSync, writeFileSync, mkdirSync } from 'fs';\nimport path from 'path';\nimport { tmpdir } from 'os';\n\n// テスト全体で使用する一時ディレクトリ\nlet tempDir: string;\n\n// 全テスト前の準備\nbeforeAll(() => {\n  tempDir = path.join(tmpdir(), 'aws-cloud-supporter-test');\n  try {\n    mkdirSync(tempDir, { recursive: true });\n  } catch {\n    // 既に存在する場合は無視\n  }\n  \n  // テストフィクスチャー作成\n  createTestFixtures();\n});\n\nfunction createTestFixtures() {\n  // 有効なYAMLテンプレート\n  const validYamlTemplate = `\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Test CloudFormation template'\nResources:\n  TestDB:\n    Type: AWS::RDS::DBInstance\n    Properties:\n      Engine: mysql\n      DBInstanceClass: db.t3.micro\n      AllocatedStorage: 20\n  TestFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Runtime: nodejs20.x\n      Handler: index.handler\n      Code:\n        ZipFile: 'exports.handler = async () => ({ statusCode: 200 });'\n`;\n  writeFileSync(path.join(tempDir, 'valid-template.yaml'), validYamlTemplate, 'utf8');\n\n  // 有効なJSONテンプレート\n  const validJsonTemplate = {\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\n    \"Description\": \"Test CloudFormation JSON template\",\n    \"Resources\": {\n      \"TestBucket\": {\n        \"Type\": \"AWS::S3::Bucket\",\n        \"Properties\": {\n          \"BucketName\": \"test-bucket\"\n        }\n      },\n      \"TestAPI\": {\n        \"Type\": \"AWS::ApiGateway::RestApi\", \n        \"Properties\": {\n          \"Name\": \"test-api\"\n        }\n      }\n    }\n  };\n  writeFileSync(path.join(tempDir, 'valid-template.json'), JSON.stringify(validJsonTemplate, null, 2), 'utf8');\n\n  // 無効なYAMLテンプレート（構文エラー）\n  const invalidYamlTemplate = `\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Invalid YAML template'\nResources:\n  TestDB:\n    Type: AWS::RDS::DBInstance\n    Properties:\n      Engine: mysql\n      # 不正なインデント\n    DBInstanceClass: db.t3.micro\n`;\n  writeFileSync(path.join(tempDir, 'invalid-syntax.yaml'), invalidYamlTemplate, 'utf8');\n\n  // 無効なJSONテンプレート（構文エラー）  \n  const invalidJsonTemplate = `{\n  \"AWSTemplateFormatVersion\": \"2010-09-09\",\n  \"Description\": \"Invalid JSON template\",\n  \"Resources\": {\n    \"TestBucket\": {\n      \"Type\": \"AWS::S3::Bucket\",\n      \"Properties\": {\n        \"BucketName\": \"test-bucket\"\n      }\n    }, // 不正なカンマ\n  }\n}`;\n  writeFileSync(path.join(tempDir, 'invalid-syntax.json'), invalidJsonTemplate, 'utf8');\n\n  // 大きなファイル（50MB超）\n  const largeTemplate = {\n    AWSTemplateFormatVersion: \"2010-09-09\", \n    Description: \"Large template for size testing\",\n    Resources: {}\n  };\n  // 大量のリソースを生成\n  for (let i = 0; i < 10000; i++) {\n    largeTemplate.Resources[`Resource${i}`] = {\n      Type: \"AWS::S3::Bucket\",\n      Properties: {\n        BucketName: `bucket-${i}`,\n        Description: `Test bucket number ${i} for large template size testing with long description to increase file size significantly`\n      }\n    };\n  }\n  writeFileSync(path.join(tempDir, 'large-template.json'), JSON.stringify(largeTemplate, null, 2), 'utf8');\n}\n\ndescribe('TemplateParser型安全解析（CLAUDE.md: GREEN段階）', () => {\n\n  // GREEN段階: TemplateParser実装確認\n  it('should implement TemplateParser successfully', () => {\n    expect(() => {\n      require('../../../src/core/parser');\n    }).not.toThrow(); // 実装完了で成功\n  });\n\n  // YAML解析テスト（GREEN段階: 実装確認）\n  it('should parse valid YAML CloudFormation template', async () => {\n    const { TemplateParser } = require('../../../src/core/parser');\n    const parser = new TemplateParser();\n    \n    const yamlPath = path.join(tempDir, 'valid-template.yaml');\n    const template = await parser.parse(yamlPath);\n    \n    expect(template).toBeDefined();\n    expect(template.AWSTemplateFormatVersion).toBe('2010-09-09');\n    expect(template.Resources).toBeDefined();\n    expect(template.Resources.TestDB).toBeDefined();\n    expect(template.Resources.TestFunction).toBeDefined();\n  });\n\n  // JSON解析テスト（GREEN段階: 実装確認）\n  it('should parse valid JSON CloudFormation template', async () => {\n    const { TemplateParser } = require('../../../src/core/parser');\n    const parser = new TemplateParser();\n    \n    const jsonPath = path.join(tempDir, 'valid-template.json');\n    const template = await parser.parse(jsonPath);\n    \n    expect(template).toBeDefined();\n    expect(template.AWSTemplateFormatVersion).toBe('2010-09-09');\n    expect(template.Resources).toBeDefined();\n    expect(template.Resources.TestBucket).toBeDefined();\n    expect(template.Resources.TestAPI).toBeDefined();\n  });\n\n  // ファイル存在エラーテスト（CloudSupporterError統合）\n  it('should handle file not found error', async () => {\n    const { TemplateParser } = require('../../../src/core/parser');\n    const { isFileError } = require('../../../src/utils/error');\n    const parser = new TemplateParser();\n    \n    const nonExistentPath = path.join(tempDir, 'non-existent.yaml');\n    \n    await expect(parser.parse(nonExistentPath)).rejects.toThrow();\n    \n    try {\n      await parser.parse(nonExistentPath);\n    } catch (error) {\n      expect(isFileError(error)).toBe(true);\n      expect(error.filePath).toBe(nonExistentPath);\n    }\n  });\n\n  // ファイルサイズ制限テスト（50MB制限）\n  it('should reject files larger than 50MB', async () => {\n    const { TemplateParser } = require('../../../src/core/parser');\n    const { isFileError } = require('../../../src/utils/error');\n    const parser = new TemplateParser();\n    \n    const largePath = path.join(tempDir, 'large-template.json');\n    \n    await expect(parser.parse(largePath)).rejects.toThrow();\n    \n    try {\n      await parser.parse(largePath);\n    } catch (error) {\n      expect(isFileError(error)).toBe(true);\n      expect(error.message).toContain('too large');\n      expect(error.details?.fileSize).toBeGreaterThan(50 * 1024 * 1024);\n    }\n  });\n\n  // 読み込み時間制限テスト（5秒制限、モック使用）\n  it('should timeout file reading after 5 seconds', async () => {\n    // 実際の5秒待ちは避けて、モック使用\n    const { TemplateParser } = require('../../../src/core/parser');\n    const parser = new TemplateParser();\n    \n    // 通常サイズのファイルは5秒以内で読み込める想定\n    const yamlPath = path.join(tempDir, 'valid-template.yaml');\n    const startTime = performance.now();\n    await parser.parse(yamlPath);\n    const duration = performance.now() - startTime;\n    \n    expect(duration).toBeLessThan(5000);\n  });\n\n  // YAML構文エラーハンドリングテスト\n  it('should provide detailed YAML syntax error', async () => {\n    const { TemplateParser } = require('../../../src/core/parser');\n    const { isParseError } = require('../../../src/utils/error');\n    const parser = new TemplateParser();\n    \n    const invalidYamlPath = path.join(tempDir, 'invalid-syntax.yaml');\n    \n    await expect(parser.parse(invalidYamlPath)).rejects.toThrow();\n    \n    try {\n      await parser.parse(invalidYamlPath);\n    } catch (error) {\n      expect(isParseError(error)).toBe(true);\n      expect(error.message).toContain('YAML syntax error');\n    }\n  });\n\n  // JSON構文エラーハンドリングテスト\n  it('should provide detailed JSON syntax error with position', async () => {\n    const { TemplateParser } = require('../../../src/core/parser');\n    const { isParseError } = require('../../../src/utils/error');\n    const parser = new TemplateParser();\n    \n    const invalidJsonPath = path.join(tempDir, 'invalid-syntax.json');\n    \n    await expect(parser.parse(invalidJsonPath)).rejects.toThrow();\n    \n    try {\n      await parser.parse(invalidJsonPath);\n    } catch (error) {\n      expect(isParseError(error)).toBe(true);\n      expect(error.message).toContain('JSON syntax error');\n      expect(error.details?.nearText).toBeDefined();\n    }\n  });\n\n  // CloudFormation構造検証テスト\n  it('should validate CloudFormation template structure', async () => {\n    const { TemplateParser } = require('../../../src/core/parser');\n    const parser = new TemplateParser();\n    \n    // 有効なテンプレートの解析\n    const validPath = path.join(tempDir, 'valid-template.yaml');\n    const template = await parser.parse(validPath);\n    \n    expect(template).toBeValidCloudFormationResource();\n    expect(Object.keys(template.Resources)).toHaveLength(2);\n  });\n\n  // CLAUDE.md: No any types検証\n  it('should not use any types in parser implementation', () => {\n    const parserCode = readFileSync(\n      path.join(__dirname, '../../../src/core/parser.ts'),\n      'utf8'\n    );\n    expect(parserCode).toHaveNoAnyTypes();\n  });\n\n  // 型安全性テスト（CloudFormationTemplate型）\n  it('should return properly typed CloudFormationTemplate', async () => {\n    const { TemplateParser } = require('../../../src/core/parser');\n    const parser = new TemplateParser();\n    \n    const yamlPath = path.join(tempDir, 'valid-template.yaml');\n    const template = await parser.parse(yamlPath);\n    \n    // TypeScript型推論により型安全\n    expect(typeof template.AWSTemplateFormatVersion).toBe('string');\n    expect(typeof template.Description).toBe('string');\n    expect(typeof template.Resources).toBe('object');\n    \n    // リソースの型安全性\n    const testDB = template.Resources.TestDB;\n    expect(testDB).toBeDefined();\n    expect(testDB.Type).toBe('AWS::RDS::DBInstance');\n  });\n});\n\ndescribe('TemplateParserパフォーマンステスト（CLAUDE.md: 性能要件）', () => {\n\n  // パフォーマンス要件テスト（通常ファイルは5秒以内）\n  it('should parse normal templates within performance limits', async () => {\n    const { TemplateParser } = require('../../../src/core/parser');\n    const parser = new TemplateParser();\n    \n    const yamlPath = path.join(tempDir, 'valid-template.yaml');\n    const startTime = performance.now();\n    \n    const template = await parser.parse(yamlPath);\n    const duration = performance.now() - startTime;\n    \n    expect(duration).toBeLessThan(1000); // 通常ファイルは1秒以内\n    expect(template).toBeDefined();\n  });\n\n  // メモリ効率テスト（適切なリソース管理）  \n  it('should handle files efficiently without memory leaks', async () => {\n    const { TemplateParser } = require('../../../src/core/parser');\n    \n    // 複数回の解析でメモリリークがないことを確認\n    const parser = new TemplateParser();\n    const yamlPath = path.join(tempDir, 'valid-template.yaml');\n    \n    for (let i = 0; i < 10; i++) {\n      const template = await parser.parse(yamlPath);\n      expect(template.Resources).toBeDefined();\n    }\n    \n    // メモリ使用量が合理的範囲内\n    const memoryUsage = process.memoryUsage().heapUsed / 1024 / 1024;\n    expect(memoryUsage).toBeLessThan(100); // 100MB以下\n  });\n\n  // 並行解析テスト（型安全性）\n  it('should handle concurrent parsing requests safely', async () => {\n    const { TemplateParser } = require('../../../src/core/parser');\n    const parser = new TemplateParser();\n    \n    const yamlPath = path.join(tempDir, 'valid-template.yaml');\n    const jsonPath = path.join(tempDir, 'valid-template.json');\n    \n    // 並行解析\n    const promises = [\n      parser.parse(yamlPath),\n      parser.parse(jsonPath),\n      parser.parse(yamlPath),\n      parser.parse(jsonPath)\n    ];\n    \n    const templates = await Promise.all(promises);\n    \n    expect(templates).toHaveLength(4);\n    templates.forEach(template => {\n      expect(template.Resources).toBeDefined();\n    });\n  });\n});\n\ndescribe('TemplateParserエラーハンドリング統合（CLAUDE.md: 型安全エラー処理）', () => {\n\n  // CloudSupporterErrorシステム統合確認\n  it('should integrate with CloudSupporterError system', async () => {\n    const { TemplateParser } = require('../../../src/core/parser');\n    const { CloudSupporterError, ErrorType } = require('../../../src/utils/error');\n    const parser = new TemplateParser();\n    \n    const nonExistentPath = '/non/existent/file.yaml';\n    \n    try {\n      await parser.parse(nonExistentPath);\n    } catch (error) {\n      expect(error).toBeInstanceOf(CloudSupporterError);\n      expect(error.type).toBe(ErrorType.FILE_ERROR);\n      expect(error.filePath).toBe(nonExistentPath);\n      \n      // 構造化出力確認\n      const structured = error.toStructuredOutput();\n      expect(structured.error).toBe('FILE_ERROR');\n      expect(structured.filePath).toBe(nonExistentPath);\n      expect(structured.timestamp).toBeDefined();\n    }\n  });\n\n  // エラー提案メッセージテスト（ユーザビリティ）\n  it('should provide helpful error suggestions via CloudSupporterError', async () => {\n    const { TemplateParser } = require('../../../src/core/parser');\n    const parser = new TemplateParser();\n    \n    const invalidJsonPath = path.join(tempDir, 'invalid-syntax.json');\n    \n    try {\n      await parser.parse(invalidJsonPath);\n    } catch (error) {\n      // エラーメッセージの有用性確認\n      expect(error.message).toContain('syntax error');\n      expect(error.details).toBeDefined();\n      \n      // ErrorHandlerのgetSuggestionは内部メソッドなので\n      // エラータイプが正しいことのみ確認\n      expect(error.type).toBe('PARSE_ERROR');\n    }\n  });\n\n  // 構造化エラー出力テスト（型安全性）\n  it('should output structured error information', async () => {\n    const { TemplateParser } = require('../../../src/core/parser');\n    const parser = new TemplateParser();\n    \n    // 空のResourcesセクションでエラー\n    const emptyResourcesTemplate = `\nAWSTemplateFormatVersion: '2010-09-09'\nResources: {}\n`;\n    \n    const tempPath = path.join(tempDir, 'empty-resources.yaml');\n    writeFileSync(tempPath, emptyResourcesTemplate, 'utf8');\n    \n    try {\n      await parser.parse(tempPath);\n    } catch (error) {\n      const structured = error.toStructuredOutput();\n      \n      expect(structured.error).toBe('PARSE_ERROR');\n      expect(structured.message).toContain('Resources section is empty');\n      expect(structured.filePath).toBe(tempPath);\n      expect(structured.details?.nearText).toContain('at least one resource');\n    }\n  });\n});\n\n"],"version":3}