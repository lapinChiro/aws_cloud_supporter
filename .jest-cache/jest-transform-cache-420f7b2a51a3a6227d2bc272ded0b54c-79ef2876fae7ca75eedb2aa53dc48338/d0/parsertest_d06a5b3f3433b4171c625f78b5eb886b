a1710ac692c965cf4c21ece2ba4685c9
"use strict";
// CLAUDE.md準拠TemplateParserテスト（GREEN段階: Don't Reinvent the Wheel + Type-Driven）
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const os_1 = require("os");
// テスト全体で使用する一時ディレクトリ
let tempDir;
// 全テスト前の準備
beforeAll(() => {
    tempDir = path_1.default.join((0, os_1.tmpdir)(), 'aws-cloud-supporter-test');
    try {
        (0, fs_1.mkdirSync)(tempDir, { recursive: true });
    }
    catch {
        // 既に存在する場合は無視
    }
    // テストフィクスチャー作成
    createTestFixtures();
});
function createTestFixtures() {
    // 有効なYAMLテンプレート
    const validYamlTemplate = `
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Test CloudFormation template'
Resources:
  TestDB:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mysql
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
  TestFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs20.x
      Handler: index.handler
      Code:
        ZipFile: 'exports.handler = async () => ({ statusCode: 200 });'
`;
    (0, fs_1.writeFileSync)(path_1.default.join(tempDir, 'valid-template.yaml'), validYamlTemplate, 'utf8');
    // 有効なJSONテンプレート
    const validJsonTemplate = {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "Test CloudFormation JSON template",
        "Resources": {
            "TestBucket": {
                "Type": "AWS::S3::Bucket",
                "Properties": {
                    "BucketName": "test-bucket"
                }
            },
            "TestAPI": {
                "Type": "AWS::ApiGateway::RestApi",
                "Properties": {
                    "Name": "test-api"
                }
            }
        }
    };
    (0, fs_1.writeFileSync)(path_1.default.join(tempDir, 'valid-template.json'), JSON.stringify(validJsonTemplate, null, 2), 'utf8');
    // 無効なYAMLテンプレート（構文エラー）
    const invalidYamlTemplate = `
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Invalid YAML template'
Resources:
  TestDB:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mysql
      # 不正なインデント
    DBInstanceClass: db.t3.micro
`;
    (0, fs_1.writeFileSync)(path_1.default.join(tempDir, 'invalid-syntax.yaml'), invalidYamlTemplate, 'utf8');
    // 無効なJSONテンプレート（構文エラー）  
    const invalidJsonTemplate = `{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Invalid JSON template",
  "Resources": {
    "TestBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "test-bucket"
      }
    }, // 不正なカンマ
  }
}`;
    (0, fs_1.writeFileSync)(path_1.default.join(tempDir, 'invalid-syntax.json'), invalidJsonTemplate, 'utf8');
    // 大きなファイル（50MB超）
    const largeTemplate = {
        AWSTemplateFormatVersion: "2010-09-09",
        Description: "Large template for size testing",
        Resources: {}
    };
    // 大量のリソースを生成
    for (let i = 0; i < 10000; i++) {
        largeTemplate.Resources[`Resource${i}`] = {
            Type: "AWS::S3::Bucket",
            Properties: {
                BucketName: `bucket-${i}`,
                Description: `Test bucket number ${i} for large template size testing with long description to increase file size significantly`
            }
        };
    }
    (0, fs_1.writeFileSync)(path_1.default.join(tempDir, 'large-template.json'), JSON.stringify(largeTemplate, null, 2), 'utf8');
}
describe('TemplateParser型安全解析（CLAUDE.md: GREEN段階）', () => {
    // GREEN段階: TemplateParser実装確認
    it('should implement TemplateParser successfully', () => {
        expect(() => {
            require('../../../src/core/parser');
        }).not.toThrow(); // 実装完了で成功
    });
    // YAML解析テスト（GREEN段階: 実装確認）
    it('should parse valid YAML CloudFormation template', async () => {
        const { TemplateParser } = require('../../../src/core/parser');
        const parser = new TemplateParser();
        const yamlPath = path_1.default.join(tempDir, 'valid-template.yaml');
        const template = await parser.parse(yamlPath);
        expect(template).toBeDefined();
        expect(template.AWSTemplateFormatVersion).toBe('2010-09-09');
        expect(template.Resources).toBeDefined();
        expect(template.Resources.TestDB).toBeDefined();
        expect(template.Resources.TestFunction).toBeDefined();
    });
    // JSON解析テスト（GREEN段階: 実装確認）
    it('should parse valid JSON CloudFormation template', async () => {
        const { TemplateParser } = require('../../../src/core/parser');
        const parser = new TemplateParser();
        const jsonPath = path_1.default.join(tempDir, 'valid-template.json');
        const template = await parser.parse(jsonPath);
        expect(template).toBeDefined();
        expect(template.AWSTemplateFormatVersion).toBe('2010-09-09');
        expect(template.Resources).toBeDefined();
        expect(template.Resources.TestBucket).toBeDefined();
        expect(template.Resources.TestAPI).toBeDefined();
    });
    // ファイル存在エラーテスト（CloudSupporterError統合）
    it('should handle file not found error', async () => {
        const { TemplateParser } = require('../../../src/core/parser');
        const { isFileError } = require('../../../src/utils/error');
        const parser = new TemplateParser();
        const nonExistentPath = path_1.default.join(tempDir, 'non-existent.yaml');
        await expect(parser.parse(nonExistentPath)).rejects.toThrow();
        try {
            await parser.parse(nonExistentPath);
        }
        catch (error) {
            expect(isFileError(error)).toBe(true);
            expect(error.filePath).toBe(nonExistentPath);
        }
    });
    // ファイルサイズ制限テスト（50MB制限）
    it('should reject files larger than 50MB', async () => {
        const { TemplateParser } = require('../../../src/core/parser');
        const { isFileError } = require('../../../src/utils/error');
        const parser = new TemplateParser();
        const largePath = path_1.default.join(tempDir, 'large-template.json');
        await expect(parser.parse(largePath)).rejects.toThrow();
        try {
            await parser.parse(largePath);
        }
        catch (error) {
            expect(isFileError(error)).toBe(true);
            expect(error.message).toContain('too large');
            expect(error.details?.fileSize).toBeGreaterThan(50 * 1024 * 1024);
        }
    });
    // 読み込み時間制限テスト（5秒制限、モック使用）
    it('should timeout file reading after 5 seconds', async () => {
        // 実際の5秒待ちは避けて、モック使用
        const { TemplateParser } = require('../../../src/core/parser');
        const parser = new TemplateParser();
        // 通常サイズのファイルは5秒以内で読み込める想定
        const yamlPath = path_1.default.join(tempDir, 'valid-template.yaml');
        const startTime = performance.now();
        await parser.parse(yamlPath);
        const duration = performance.now() - startTime;
        expect(duration).toBeLessThan(5000);
    });
    // YAML構文エラーハンドリングテスト
    it('should provide detailed YAML syntax error', async () => {
        const { TemplateParser } = require('../../../src/core/parser');
        const { isParseError } = require('../../../src/utils/error');
        const parser = new TemplateParser();
        const invalidYamlPath = path_1.default.join(tempDir, 'invalid-syntax.yaml');
        await expect(parser.parse(invalidYamlPath)).rejects.toThrow();
        try {
            await parser.parse(invalidYamlPath);
        }
        catch (error) {
            expect(isParseError(error)).toBe(true);
            expect(error.message).toContain('YAML syntax error');
        }
    });
    // JSON構文エラーハンドリングテスト
    it('should provide detailed JSON syntax error with position', async () => {
        const { TemplateParser } = require('../../../src/core/parser');
        const { isParseError } = require('../../../src/utils/error');
        const parser = new TemplateParser();
        const invalidJsonPath = path_1.default.join(tempDir, 'invalid-syntax.json');
        await expect(parser.parse(invalidJsonPath)).rejects.toThrow();
        try {
            await parser.parse(invalidJsonPath);
        }
        catch (error) {
            expect(isParseError(error)).toBe(true);
            expect(error.message).toContain('JSON syntax error');
            expect(error.details?.nearText).toBeDefined();
        }
    });
    // CloudFormation構造検証テスト
    it('should validate CloudFormation template structure', async () => {
        const { TemplateParser } = require('../../../src/core/parser');
        const parser = new TemplateParser();
        // 有効なテンプレートの解析
        const validPath = path_1.default.join(tempDir, 'valid-template.yaml');
        const template = await parser.parse(validPath);
        expect(template).toBeValidCloudFormationResource();
        expect(Object.keys(template.Resources)).toHaveLength(2);
    });
    // CLAUDE.md: No any types検証
    it('should not use any types in parser implementation', () => {
        const parserCode = (0, fs_1.readFileSync)(path_1.default.join(__dirname, '../../../src/core/parser.ts'), 'utf8');
        expect(parserCode).toHaveNoAnyTypes();
    });
    // 型安全性テスト（CloudFormationTemplate型）
    it('should return properly typed CloudFormationTemplate', async () => {
        const { TemplateParser } = require('../../../src/core/parser');
        const parser = new TemplateParser();
        const yamlPath = path_1.default.join(tempDir, 'valid-template.yaml');
        const template = await parser.parse(yamlPath);
        // TypeScript型推論により型安全
        expect(typeof template.AWSTemplateFormatVersion).toBe('string');
        expect(typeof template.Description).toBe('string');
        expect(typeof template.Resources).toBe('object');
        // リソースの型安全性
        const testDB = template.Resources.TestDB;
        expect(testDB).toBeDefined();
        expect(testDB.Type).toBe('AWS::RDS::DBInstance');
    });
});
describe('TemplateParserパフォーマンステスト（CLAUDE.md: 性能要件）', () => {
    // パフォーマンス要件テスト（通常ファイルは5秒以内）
    it('should parse normal templates within performance limits', async () => {
        const { TemplateParser } = require('../../../src/core/parser');
        const parser = new TemplateParser();
        const yamlPath = path_1.default.join(tempDir, 'valid-template.yaml');
        const startTime = performance.now();
        const template = await parser.parse(yamlPath);
        const duration = performance.now() - startTime;
        expect(duration).toBeLessThan(1000); // 通常ファイルは1秒以内
        expect(template).toBeDefined();
    });
    // メモリ効率テスト（適切なリソース管理）  
    it('should handle files efficiently without memory leaks', async () => {
        const { TemplateParser } = require('../../../src/core/parser');
        // 複数回の解析でメモリリークがないことを確認
        const parser = new TemplateParser();
        const yamlPath = path_1.default.join(tempDir, 'valid-template.yaml');
        for (let i = 0; i < 10; i++) {
            const template = await parser.parse(yamlPath);
            expect(template.Resources).toBeDefined();
        }
        // メモリ使用量が合理的範囲内
        const memoryUsage = process.memoryUsage().heapUsed / 1024 / 1024;
        expect(memoryUsage).toBeLessThan(100); // 100MB以下
    });
    // 並行解析テスト（型安全性）
    it('should handle concurrent parsing requests safely', async () => {
        const { TemplateParser } = require('../../../src/core/parser');
        const parser = new TemplateParser();
        const yamlPath = path_1.default.join(tempDir, 'valid-template.yaml');
        const jsonPath = path_1.default.join(tempDir, 'valid-template.json');
        // 並行解析
        const promises = [
            parser.parse(yamlPath),
            parser.parse(jsonPath),
            parser.parse(yamlPath),
            parser.parse(jsonPath)
        ];
        const templates = await Promise.all(promises);
        expect(templates).toHaveLength(4);
        templates.forEach(template => {
            expect(template.Resources).toBeDefined();
        });
    });
});
describe('TemplateParserエラーハンドリング統合（CLAUDE.md: 型安全エラー処理）', () => {
    // CloudSupporterErrorシステム統合確認
    it('should integrate with CloudSupporterError system', async () => {
        const { TemplateParser } = require('../../../src/core/parser');
        const { CloudSupporterError, ErrorType } = require('../../../src/utils/error');
        const parser = new TemplateParser();
        const nonExistentPath = '/non/existent/file.yaml';
        try {
            await parser.parse(nonExistentPath);
        }
        catch (error) {
            expect(error).toBeInstanceOf(CloudSupporterError);
            expect(error.type).toBe(ErrorType.FILE_ERROR);
            expect(error.filePath).toBe(nonExistentPath);
            // 構造化出力確認
            const structured = error.toStructuredOutput();
            expect(structured.error).toBe('FILE_ERROR');
            expect(structured.filePath).toBe(nonExistentPath);
            expect(structured.timestamp).toBeDefined();
        }
    });
    // エラー提案メッセージテスト（ユーザビリティ）
    it('should provide helpful error suggestions via CloudSupporterError', async () => {
        const { TemplateParser } = require('../../../src/core/parser');
        const parser = new TemplateParser();
        const invalidJsonPath = path_1.default.join(tempDir, 'invalid-syntax.json');
        try {
            await parser.parse(invalidJsonPath);
        }
        catch (error) {
            // エラーメッセージの有用性確認
            expect(error.message).toContain('syntax error');
            expect(error.details).toBeDefined();
            // ErrorHandlerのgetSuggestionは内部メソッドなので
            // エラータイプが正しいことのみ確認
            expect(error.type).toBe('PARSE_ERROR');
        }
    });
    // 構造化エラー出力テスト（型安全性）
    it('should output structured error information', async () => {
        const { TemplateParser } = require('../../../src/core/parser');
        const parser = new TemplateParser();
        // 空のResourcesセクションでエラー
        const emptyResourcesTemplate = `
AWSTemplateFormatVersion: '2010-09-09'
Resources: {}
`;
        const tempPath = path_1.default.join(tempDir, 'empty-resources.yaml');
        (0, fs_1.writeFileSync)(tempPath, emptyResourcesTemplate, 'utf8');
        try {
            await parser.parse(tempPath);
        }
        catch (error) {
            const structured = error.toStructuredOutput();
            expect(structured.error).toBe('PARSE_ERROR');
            expect(structured.message).toContain('Resources section is empty');
            expect(structured.filePath).toBe(tempPath);
            expect(structured.details?.nearText).toContain('at least one resource');
        }
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,