{"file":"/home/kyohei/aws_cloud_supporter/src/core/extractor.ts","mappings":"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","names":[],"sources":["/home/kyohei/aws_cloud_supporter/src/core/extractor.ts"],"sourcesContent":["// CLAUDE.md準拠ResourceExtractor（UNIX Philosophy + Type-Driven Development）\n\nimport { \n  CloudFormationTemplate, \n  SupportedResource,\n  isFargateService,\n  isApplicationLoadBalancer\n} from '../types/cloudformation';\nimport { ExtractResult } from '../types/metrics';\n\n// UNIX Philosophy: 一つのことをうまくやる（リソース抽出のみ）\nexport class ResourceExtractor {\n  \n  // サポート対象リソースタイプ（CLAUDE.md: DRY原則、public for testing）\n  public static readonly SUPPORTED_TYPES = new Set([\n    'AWS::RDS::DBInstance',\n    'AWS::Lambda::Function', \n    'AWS::Serverless::Function',\n    'AWS::ECS::Service',\n    'AWS::ElasticLoadBalancingV2::LoadBalancer',\n    'AWS::DynamoDB::Table',\n    'AWS::ApiGateway::RestApi',\n    'AWS::Serverless::Api'\n  ]);\n\n  // メイン抽出メソッド（O(n)アルゴリズム、型安全性重視）\n  extract(template: CloudFormationTemplate): ExtractResult {\n    const startTime = performance.now();\n    \n    const supported: SupportedResource[] = [];\n    const unsupported: string[] = [];\n    \n    // O(n)での高速処理（CLAUDE.md: パフォーマンス重視）\n    for (const [logicalId, resource] of Object.entries(template.Resources)) {\n      // 型安全なリソース判定（Don't Reinvent the Wheel: 既存型ガード使用）\n      if (this.isSupportedResourceType(resource)) {\n        // 特殊ケース判定（ECS FargateとApplication LBのみ）\n        if (this.isActuallySupported(resource)) {\n          // SupportedResource型にLogicalIdを追加\n          const supportedResource = {\n            ...resource,\n            LogicalId: logicalId\n          } as SupportedResource;\n          \n          supported.push(supportedResource);\n        } else {\n          // 条件に合わないリソース（例：ECS EC2サービス、NLB）\n          unsupported.push(logicalId);\n        }\n      } else {\n        // 完全にサポート対象外のリソース\n        unsupported.push(logicalId);\n      }\n    }\n\n    const extractionTimeMs = performance.now() - startTime;\n    \n    // パフォーマンス監視（CLAUDE.md: 性能要件）\n    if (extractionTimeMs > 3000) {\n      console.warn(`⚠️  Resource extraction took ${extractionTimeMs.toFixed(0)}ms (target: <3000ms)`);\n    }\n\n    return {\n      supported,\n      unsupported,\n      totalCount: Object.keys(template.Resources).length,\n      extractionTimeMs: Math.round(extractionTimeMs)\n    };\n  }\n\n  // サポート対象リソースタイプ判定（型安全性）\n  private isSupportedResourceType(resource: { Type: string }): boolean {\n    return ResourceExtractor.SUPPORTED_TYPES.has(resource.Type);\n  }\n\n  // 実際にサポート対象かの詳細判定（特殊ケース考慮）\n  private isActuallySupported(resource: { Type: string; Properties?: unknown }): boolean {\n    // ECS：Fargateサービスのみサポート\n    if (resource.Type === 'AWS::ECS::Service') {\n      return isFargateService(resource);\n    }\n    \n    // LoadBalancer：Application LBのみサポート\n    if (resource.Type === 'AWS::ElasticLoadBalancingV2::LoadBalancer') {\n      return isApplicationLoadBalancer(resource);\n    }\n    \n    // その他のサポート対象リソースは全て対象\n    return true;\n  }\n\n  // UNIX Philosophy: 単一責任（extractメソッドのみpublic）\n  // 他のメソッドは内部実装として非公開\n}\n\n// パフォーマンス測定ユーティリティ（CLAUDE.md: 単一責任分離）\nexport class ExtractionPerformanceMonitor {\n  \n  static measureExtractionPerformance(\n    extractor: ResourceExtractor, \n    template: CloudFormationTemplate\n  ): {\n    result: ExtractResult;\n    memoryUsage: number;\n    performanceGrade: 'A' | 'B' | 'C' | 'F';\n  } {\n    const memoryBefore = process.memoryUsage().heapUsed;\n    const startTime = performance.now();\n    \n    const result = extractor.extract(template);\n    \n    const duration = performance.now() - startTime;\n    const memoryAfter = process.memoryUsage().heapUsed;\n    const memoryUsage = (memoryAfter - memoryBefore) / 1024 / 1024; // MB\n\n    // パフォーマンス評価\n    let performanceGrade: 'A' | 'B' | 'C' | 'F';\n    if (duration < 1000 && memoryUsage < 10) {\n      performanceGrade = 'A';\n    } else if (duration < 3000 && memoryUsage < 50) {\n      performanceGrade = 'B';\n    } else if (duration < 5000 && memoryUsage < 100) {\n      performanceGrade = 'C';\n    } else {\n      performanceGrade = 'F';\n    }\n\n    return {\n      result,\n      memoryUsage,\n      performanceGrade\n    };\n  }\n}\n\n"],"version":3}