{"file":"/home/kyohei/aws_cloud_supporter/tests/unit/core/extractor-optimization.test.ts","mappings":"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","names":[],"sources":["/home/kyohei/aws_cloud_supporter/tests/unit/core/extractor-optimization.test.ts"],"sourcesContent":["// CLAUDE.md準拠ResourceExtractor最適化テスト（BLUE段階: リファクタリング検証）\n\nimport { ResourceExtractor, ExtractionPerformanceMonitor } from '../../../src/core/extractor';\nimport { TemplateParser } from '../../../src/core/parser';\nimport path from 'path';\n\ndescribe('ResourceExtractor最適化（CLAUDE.md: BLUE段階）', () => {\n  let parser: TemplateParser;\n  let extractor: ResourceExtractor;\n\n  beforeEach(() => {\n    parser = new TemplateParser();\n    extractor = new ResourceExtractor();\n  });\n\n  // 実際のCloudFormationテンプレートでの動作確認\n  it('should work with real CloudFormation templates', async () => {\n    const realTemplates = [\n      'serverless-api-sam.yaml',\n      'container-microservices-ecs.yaml',\n      'web-application-stack.yaml'\n    ];\n\n    for (const templateFile of realTemplates) {\n      const templatePath = path.join(__dirname, '../../../examples', templateFile);\n      \n      const template = await parser.parse(templatePath);\n      const result = extractor.extract(template);\n      \n      expect(result.totalCount).toBeGreaterThan(0);\n      expect(result.extractionTimeMs).toBeLessThan(1000); // 実テンプレートは1秒以内\n      \n      console.log(`📊 ${templateFile}: ${result.supported.length}/${result.totalCount} サポート対象 (${result.extractionTimeMs}ms)`);\n    }\n  });\n\n  // パフォーマンス最適化確認\n  it('should demonstrate optimized performance characteristics', async () => {\n    const basicTemplatePath = path.join(__dirname, '../../../examples/basic-cloudformation.yaml');\n    const template = await parser.parse(basicTemplatePath);\n    \n    // 複数回実行でのパフォーマンス安定性\n    const results = [];\n    for (let i = 0; i < 10; i++) {\n      const startTime = performance.now();\n      const result = extractor.extract(template);\n      const duration = performance.now() - startTime;\n      \n      results.push({\n        duration,\n        supportedCount: result.supported.length,\n        totalCount: result.totalCount\n      });\n    }\n\n    // パフォーマンス安定性\n    const avgDuration = results.reduce((sum, r) => sum + r.duration, 0) / results.length;\n    expect(avgDuration).toBeLessThan(100); // 平均100ms以下\n\n    // 結果一貫性\n    const firstResult = results[0];\n    results.forEach(result => {\n      expect(result.supportedCount).toBe(firstResult.supportedCount);\n      expect(result.totalCount).toBe(firstResult.totalCount);\n    });\n  });\n\n  // メモリ効率性の詳細確認\n  it('should maintain excellent memory efficiency', async () => {\n    const basicTemplatePath = path.join(__dirname, '../../../examples/basic-cloudformation.yaml');\n    const template = await parser.parse(basicTemplatePath);\n\n    const memoryBefore = process.memoryUsage();\n    \n    // 1000回抽出（メモリリーク確認）\n    for (let i = 0; i < 1000; i++) {\n      extractor.extract(template);\n    }\n    \n    const memoryAfter = process.memoryUsage();\n    const memoryDelta = (memoryAfter.heapUsed - memoryBefore.heapUsed) / 1024 / 1024;\n    \n    expect(memoryDelta).toBeLessThan(10); // メモリ増加10MB以下\n    console.log(`🧠 メモリ効率: ${memoryDelta.toFixed(1)}MB増加（1000回抽出）`);\n  });\n\n  // 型安全性の詳細確認（CLAUDE.md: Type-Driven Development）\n  it('should demonstrate enhanced type safety', async () => {\n    const basicTemplatePath = path.join(__dirname, '../../../examples/basic-cloudformation.yaml');\n    const template = await parser.parse(basicTemplatePath);\n    const result = extractor.extract(template);\n    \n    // SupportedResource型の型安全性\n    result.supported.forEach(resource => {\n      // LogicalIdプロパティの存在確認\n      expect(resource.LogicalId).toBeDefined();\n      expect(typeof resource.LogicalId).toBe('string');\n      \n      // Type プロパティの型安全性\n      expect(resource.Type).toBeDefined();\n      expect(typeof resource.Type).toBe('string');\n      \n      // Properties の型安全性（unknownだが存在確認可能）\n      expect(resource.Properties === undefined || typeof resource.Properties === 'object').toBe(true);\n    });\n\n    // unsupported配列の型安全性\n    result.unsupported.forEach(logicalId => {\n      expect(typeof logicalId).toBe('string');\n      expect(logicalId.length).toBeGreaterThan(0);\n    });\n  });\n\n  // エラーハンドリングとの統合確認\n  it('should handle edge cases gracefully', () => {\n    // 空のテンプレート\n    const emptyTemplate = {\n      AWSTemplateFormatVersion: \"2010-09-09\",\n      Resources: {}\n    };\n    \n    const result = extractor.extract(emptyTemplate);\n    \n    expect(result.supported).toHaveLength(0);\n    expect(result.unsupported).toHaveLength(0);\n    expect(result.totalCount).toBe(0);\n    expect(result.extractionTimeMs).toBeGreaterThanOrEqual(0);\n\n    // 型安全性：空配列でも適切な型\n    expect(Array.isArray(result.supported)).toBe(true);\n    expect(Array.isArray(result.unsupported)).toBe(true);\n  });\n\n  // ExtractionPerformanceMonitor統合テスト\n  it('should integrate with performance monitoring', async () => {\n    const basicTemplatePath = path.join(__dirname, '../../../examples/basic-cloudformation.yaml');\n    const template = await parser.parse(basicTemplatePath);\n    \n    const performanceResult = ExtractionPerformanceMonitor.measureExtractionPerformance(extractor, template);\n    \n    expect(performanceResult.result).toBeDefined();\n    expect(performanceResult.memoryUsage).toBeGreaterThanOrEqual(0);\n    expect(['A', 'B', 'C', 'F']).toContain(performanceResult.performanceGrade);\n    \n    console.log(`⚡ パフォーマンス評価: ${performanceResult.performanceGrade} (メモリ: ${performanceResult.memoryUsage.toFixed(1)}MB)`);\n  });\n\n  // 実際のサポート対象リソース検証\n  it('should accurately detect supported resources in real templates', async () => {\n    const samTemplatePath = path.join(__dirname, '../../../examples/serverless-api-sam.yaml');\n    const template = await parser.parse(samTemplatePath);\n    const result = extractor.extract(template);\n\n    // SAMテンプレートのサポート対象確認\n    const resourceTypes = result.supported.map(r => r.Type);\n    const expectedSupportedTypes = [\n      'AWS::Serverless::Api',\n      'AWS::Serverless::Function', \n      'AWS::DynamoDB::Table'\n    ];\n\n    expectedSupportedTypes.forEach(expectedType => {\n      expect(resourceTypes.some(type => type === expectedType)).toBe(true);\n    });\n\n    console.log(`📋 SAMテンプレート: サポート対象リソース型 ${[...new Set(resourceTypes)].join(', ')}`);\n  });\n});"],"version":3}