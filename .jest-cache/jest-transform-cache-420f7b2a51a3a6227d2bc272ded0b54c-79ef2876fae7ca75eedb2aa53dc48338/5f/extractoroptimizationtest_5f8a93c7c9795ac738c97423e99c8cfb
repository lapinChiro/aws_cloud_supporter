1bd7d8764416413e49208bddbdacbf46
"use strict";
// CLAUDE.mdÊ∫ñÊã†ResourceExtractorÊúÄÈÅ©Âåñ„ÉÜ„Çπ„ÉàÔºàBLUEÊÆµÈöé: „É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞Ê§úË®ºÔºâ
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const extractor_1 = require("../../../src/core/extractor");
const parser_1 = require("../../../src/core/parser");
const path_1 = __importDefault(require("path"));
describe('ResourceExtractorÊúÄÈÅ©ÂåñÔºàCLAUDE.md: BLUEÊÆµÈöéÔºâ', () => {
    let parser;
    let extractor;
    beforeEach(() => {
        parser = new parser_1.TemplateParser();
        extractor = new extractor_1.ResourceExtractor();
    });
    // ÂÆüÈöõ„ÅÆCloudFormation„ÉÜ„É≥„Éó„É¨„Éº„Éà„Åß„ÅÆÂãï‰ΩúÁ¢∫Ë™ç
    it('should work with real CloudFormation templates', async () => {
        const realTemplates = [
            'serverless-api-sam.yaml',
            'container-microservices-ecs.yaml',
            'web-application-stack.yaml'
        ];
        for (const templateFile of realTemplates) {
            const templatePath = path_1.default.join(__dirname, '../../../examples', templateFile);
            const template = await parser.parse(templatePath);
            const result = extractor.extract(template);
            expect(result.totalCount).toBeGreaterThan(0);
            expect(result.extractionTimeMs).toBeLessThan(1000); // ÂÆü„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅØ1Áßí‰ª•ÂÜÖ
            console.log(`üìä ${templateFile}: ${result.supported.length}/${result.totalCount} „Çµ„Éù„Éº„ÉàÂØæË±° (${result.extractionTimeMs}ms)`);
        }
    });
    // „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©ÂåñÁ¢∫Ë™ç
    it('should demonstrate optimized performance characteristics', async () => {
        const basicTemplatePath = path_1.default.join(__dirname, '../../../examples/basic-cloudformation.yaml');
        const template = await parser.parse(basicTemplatePath);
        // Ë§áÊï∞ÂõûÂÆüË°å„Åß„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂÆâÂÆöÊÄß
        const results = [];
        for (let i = 0; i < 10; i++) {
            const startTime = performance.now();
            const result = extractor.extract(template);
            const duration = performance.now() - startTime;
            results.push({
                duration,
                supportedCount: result.supported.length,
                totalCount: result.totalCount
            });
        }
        // „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂÆâÂÆöÊÄß
        const avgDuration = results.reduce((sum, r) => sum + r.duration, 0) / results.length;
        expect(avgDuration).toBeLessThan(100); // Âπ≥Âùá100ms‰ª•‰∏ã
        // ÁµêÊûú‰∏ÄË≤´ÊÄß
        const firstResult = results[0];
        results.forEach(result => {
            expect(result.supportedCount).toBe(firstResult.supportedCount);
            expect(result.totalCount).toBe(firstResult.totalCount);
        });
    });
    // „É°„É¢„É™ÂäπÁéáÊÄß„ÅÆË©≥Á¥∞Á¢∫Ë™ç
    it('should maintain excellent memory efficiency', async () => {
        const basicTemplatePath = path_1.default.join(__dirname, '../../../examples/basic-cloudformation.yaml');
        const template = await parser.parse(basicTemplatePath);
        const memoryBefore = process.memoryUsage();
        // 1000ÂõûÊäΩÂá∫Ôºà„É°„É¢„É™„É™„Éº„ÇØÁ¢∫Ë™çÔºâ
        for (let i = 0; i < 1000; i++) {
            extractor.extract(template);
        }
        const memoryAfter = process.memoryUsage();
        const memoryDelta = (memoryAfter.heapUsed - memoryBefore.heapUsed) / 1024 / 1024;
        expect(memoryDelta).toBeLessThan(10); // „É°„É¢„É™Â¢óÂä†10MB‰ª•‰∏ã
        console.log(`üß† „É°„É¢„É™ÂäπÁéá: ${memoryDelta.toFixed(1)}MBÂ¢óÂä†Ôºà1000ÂõûÊäΩÂá∫Ôºâ`);
    });
    // ÂûãÂÆâÂÖ®ÊÄß„ÅÆË©≥Á¥∞Á¢∫Ë™çÔºàCLAUDE.md: Type-Driven DevelopmentÔºâ
    it('should demonstrate enhanced type safety', async () => {
        const basicTemplatePath = path_1.default.join(__dirname, '../../../examples/basic-cloudformation.yaml');
        const template = await parser.parse(basicTemplatePath);
        const result = extractor.extract(template);
        // SupportedResourceÂûã„ÅÆÂûãÂÆâÂÖ®ÊÄß
        result.supported.forEach(resource => {
            // LogicalId„Éó„É≠„Éë„ÉÜ„Ç£„ÅÆÂ≠òÂú®Á¢∫Ë™ç
            expect(resource.LogicalId).toBeDefined();
            expect(typeof resource.LogicalId).toBe('string');
            // Type „Éó„É≠„Éë„ÉÜ„Ç£„ÅÆÂûãÂÆâÂÖ®ÊÄß
            expect(resource.Type).toBeDefined();
            expect(typeof resource.Type).toBe('string');
            // Properties „ÅÆÂûãÂÆâÂÖ®ÊÄßÔºàunknown„Å†„ÅåÂ≠òÂú®Á¢∫Ë™çÂèØËÉΩÔºâ
            expect(resource.Properties === undefined || typeof resource.Properties === 'object').toBe(true);
        });
        // unsupportedÈÖçÂàó„ÅÆÂûãÂÆâÂÖ®ÊÄß
        result.unsupported.forEach(logicalId => {
            expect(typeof logicalId).toBe('string');
            expect(logicalId.length).toBeGreaterThan(0);
        });
    });
    // „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Å®„ÅÆÁµ±ÂêàÁ¢∫Ë™ç
    it('should handle edge cases gracefully', () => {
        // Á©∫„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà
        const emptyTemplate = {
            AWSTemplateFormatVersion: "2010-09-09",
            Resources: {}
        };
        const result = extractor.extract(emptyTemplate);
        expect(result.supported).toHaveLength(0);
        expect(result.unsupported).toHaveLength(0);
        expect(result.totalCount).toBe(0);
        expect(result.extractionTimeMs).toBeGreaterThanOrEqual(0);
        // ÂûãÂÆâÂÖ®ÊÄßÔºöÁ©∫ÈÖçÂàó„Åß„ÇÇÈÅ©Âàá„Å™Âûã
        expect(Array.isArray(result.supported)).toBe(true);
        expect(Array.isArray(result.unsupported)).toBe(true);
    });
    // ExtractionPerformanceMonitorÁµ±Âêà„ÉÜ„Çπ„Éà
    it('should integrate with performance monitoring', async () => {
        const basicTemplatePath = path_1.default.join(__dirname, '../../../examples/basic-cloudformation.yaml');
        const template = await parser.parse(basicTemplatePath);
        const performanceResult = extractor_1.ExtractionPerformanceMonitor.measureExtractionPerformance(extractor, template);
        expect(performanceResult.result).toBeDefined();
        expect(performanceResult.memoryUsage).toBeGreaterThanOrEqual(0);
        expect(['A', 'B', 'C', 'F']).toContain(performanceResult.performanceGrade);
        console.log(`‚ö° „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË©ï‰æ°: ${performanceResult.performanceGrade} („É°„É¢„É™: ${performanceResult.memoryUsage.toFixed(1)}MB)`);
    });
    // ÂÆüÈöõ„ÅÆ„Çµ„Éù„Éº„ÉàÂØæË±°„É™„ÇΩ„Éº„ÇπÊ§úË®º
    it('should accurately detect supported resources in real templates', async () => {
        const samTemplatePath = path_1.default.join(__dirname, '../../../examples/serverless-api-sam.yaml');
        const template = await parser.parse(samTemplatePath);
        const result = extractor.extract(template);
        // SAM„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆ„Çµ„Éù„Éº„ÉàÂØæË±°Á¢∫Ë™ç
        const resourceTypes = result.supported.map(r => r.Type);
        const expectedSupportedTypes = [
            'AWS::Serverless::Api',
            'AWS::Serverless::Function',
            'AWS::DynamoDB::Table'
        ];
        expectedSupportedTypes.forEach(expectedType => {
            expect(resourceTypes.some(type => type === expectedType)).toBe(true);
        });
        console.log(`üìã SAM„ÉÜ„É≥„Éó„É¨„Éº„Éà: „Çµ„Éù„Éº„ÉàÂØæË±°„É™„ÇΩ„Éº„ÇπÂûã ${[...new Set(resourceTypes)].join(', ')}`);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,