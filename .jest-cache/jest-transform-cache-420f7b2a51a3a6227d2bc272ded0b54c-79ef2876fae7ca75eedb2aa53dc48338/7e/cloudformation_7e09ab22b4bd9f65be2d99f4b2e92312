43ac492e6c805f045754a9fda1b34260
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceType = void 0;
exports.isRDSInstance = isRDSInstance;
exports.isLambdaFunction = isLambdaFunction;
exports.isServerlessFunction = isServerlessFunction;
exports.isECSService = isECSService;
exports.isALB = isALB;
exports.isDynamoDBTable = isDynamoDBTable;
exports.isAPIGateway = isAPIGateway;
exports.isServerlessAPI = isServerlessAPI;
exports.isSupportedResource = isSupportedResource;
exports.isFargateService = isFargateService;
exports.isApplicationLoadBalancer = isApplicationLoadBalancer;
// リソースタイプ列挙（DRY原則）
var ResourceType;
(function (ResourceType) {
    ResourceType["RDS_DB_INSTANCE"] = "AWS::RDS::DBInstance";
    ResourceType["LAMBDA_FUNCTION"] = "AWS::Lambda::Function";
    ResourceType["SERVERLESS_FUNCTION"] = "AWS::Serverless::Function";
    ResourceType["ECS_SERVICE"] = "AWS::ECS::Service";
    ResourceType["ALB"] = "AWS::ElasticLoadBalancingV2::LoadBalancer";
    ResourceType["DYNAMODB_TABLE"] = "AWS::DynamoDB::Table";
    ResourceType["API_GATEWAY"] = "AWS::ApiGateway::RestApi";
    ResourceType["SERVERLESS_API"] = "AWS::Serverless::Api";
})(ResourceType || (exports.ResourceType = ResourceType = {}));
// リソース識別ヘルパー（型安全性確保）
function isRDSInstance(resource) {
    return resource.Type === ResourceType.RDS_DB_INSTANCE;
}
function isLambdaFunction(resource) {
    return resource.Type === ResourceType.LAMBDA_FUNCTION;
}
function isServerlessFunction(resource) {
    return resource.Type === ResourceType.SERVERLESS_FUNCTION;
}
function isECSService(resource) {
    return resource.Type === ResourceType.ECS_SERVICE;
}
function isALB(resource) {
    return resource.Type === ResourceType.ALB;
}
function isDynamoDBTable(resource) {
    return resource.Type === ResourceType.DYNAMODB_TABLE;
}
function isAPIGateway(resource) {
    return resource.Type === ResourceType.API_GATEWAY;
}
function isServerlessAPI(resource) {
    return resource.Type === ResourceType.SERVERLESS_API;
}
// 型安全なリソース判定（CLAUDE.md: Type-Driven Development）
function isSupportedResource(resource) {
    const supportedTypes = new Set([
        ResourceType.RDS_DB_INSTANCE,
        ResourceType.LAMBDA_FUNCTION,
        ResourceType.SERVERLESS_FUNCTION,
        ResourceType.ECS_SERVICE,
        ResourceType.ALB,
        ResourceType.DYNAMODB_TABLE,
        ResourceType.API_GATEWAY,
        ResourceType.SERVERLESS_API
    ]);
    return supportedTypes.has(resource.Type);
}
// Fargateサービス判定（型安全、ECS特殊ケース対応）
function isFargateService(resource) {
    if (!isECSService(resource))
        return false;
    const props = resource.Properties;
    if (!props)
        return false;
    // LaunchType直接指定
    if (props.LaunchType === 'FARGATE')
        return true;
    // CapacityProviderStrategy経由
    if (props.CapacityProviderStrategy) {
        return props.CapacityProviderStrategy.some(strategy => strategy.CapacityProvider === 'FARGATE' ||
            strategy.CapacityProvider === 'FARGATE_SPOT');
    }
    return false;
}
// Application LB判定（NLB除外）
function isApplicationLoadBalancer(resource) {
    if (!isALB(resource))
        return false;
    const props = resource.Properties;
    if (!props)
        return true; // デフォルトはApplication
    return !props.Type || props.Type === 'application';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,