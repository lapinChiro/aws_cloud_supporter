{"file":"/home/kyohei/aws_cloud_supporter/tests/unit/types/type-safety.test.ts","mappings":"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","names":[],"sources":["/home/kyohei/aws_cloud_supporter/tests/unit/types/type-safety.test.ts"],"sourcesContent":["// CLAUDE.md準拠 型安全性包括テスト（BLUE段階: リファクタリング検証）\n\nimport { \n  CloudFormationResource, \n  SupportedResource, \n  ResourceType,\n  isRDSInstance,\n  isLambdaFunction,\n  isSupportedResource,\n  isFargateService,\n  isApplicationLoadBalancer\n} from '../../../src/types/cloudformation';\nimport { MetricDefinition, MetricConfig } from '../../../src/types/metrics';\nimport { ErrorDetails } from '../../../src/types/common';\n\ndescribe('型安全性包括テスト（CLAUDE.md BLUE段階）', () => {\n\n  // Union型の型ナロウイング検証\n  it('should properly narrow union types with type guards', () => {\n    const testResources: CloudFormationResource[] = [\n      {\n        Type: 'AWS::RDS::DBInstance',\n        Properties: { Engine: 'mysql', DBInstanceClass: 'db.t3.micro' }\n      },\n      {\n        Type: 'AWS::Lambda::Function', \n        Properties: { Runtime: 'nodejs20.x', MemorySize: 256 }\n      },\n      {\n        Type: 'AWS::EC2::Instance', // 非サポート\n        Properties: { InstanceType: 't3.micro' }\n      }\n    ];\n\n    // 型ガード関数での型ナロウイング\n    const rdsResources = testResources.filter(isRDSInstance);\n    const lambdaResources = testResources.filter(isLambdaFunction);\n    const supportedResources = testResources.filter(isSupportedResource);\n\n    expect(rdsResources).toHaveLength(1);\n    expect(lambdaResources).toHaveLength(1);\n    expect(supportedResources).toHaveLength(2); // EC2は除外\n    \n    // 型安全性：型ナロウイング後はプロパティアクセス可能\n    if (rdsResources.length > 0) {\n      const rds = rdsResources[0];\n      // TypeScriptの型推論でRDSDBInstance型として認識される\n      expect(rds.Type).toBe('AWS::RDS::DBInstance');\n    }\n  });\n\n  // ECS Fargate判定の型安全性\n  it('should safely detect Fargate services', () => {\n    const fargateService: CloudFormationResource = {\n      Type: 'AWS::ECS::Service',\n      Properties: {\n        LaunchType: 'FARGATE',\n        TaskDefinition: 'test-task'\n      }\n    };\n\n    const ec2Service: CloudFormationResource = {\n      Type: 'AWS::ECS::Service', \n      Properties: {\n        LaunchType: 'EC2'\n      }\n    };\n\n    expect(isFargateService(fargateService)).toBe(true);\n    expect(isFargateService(ec2Service)).toBe(false);\n  });\n\n  // ALB vs NLB判定の型安全性\n  it('should safely detect Application Load Balancers', () => {\n    const alb: CloudFormationResource = {\n      Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer',\n      Properties: {\n        Type: 'application'\n      }\n    };\n\n    const nlb: CloudFormationResource = {\n      Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer',\n      Properties: {\n        Type: 'network'\n      }\n    };\n\n    expect(isApplicationLoadBalancer(alb)).toBe(true);\n    expect(isApplicationLoadBalancer(nlb)).toBe(false);\n  });\n\n  // メトリクス型の安全性（しきい値計算）\n  it('should ensure metric thresholds are type safe', () => {\n    const testMetric: MetricDefinition = {\n      metric_name: 'CPUUtilization',\n      namespace: 'AWS/RDS',\n      unit: 'Percent',\n      description: 'CPU使用率',\n      statistic: 'Average',\n      recommended_threshold: {\n        warning: 70,\n        critical: 90\n      },\n      evaluation_period: 300,\n      category: 'Performance',\n      importance: 'High'\n    };\n\n    // しきい値の妥当性（カスタムマッチャー使用）\n    expect(testMetric.recommended_threshold).toHaveValidThreshold();\n    \n    // 型安全性：コンパイル時に型チェック済み\n    expect(testMetric.statistic).toBe('Average');\n    expect(testMetric.category).toBe('Performance');\n    expect(testMetric.importance).toBe('High');\n  });\n\n  // エラー型の安全性\n  it('should define type-safe error interfaces', () => {\n    const testErrorDetails: ErrorDetails = {\n      originalError: 'test error',\n      fileSize: 1024,\n      lineNumber: 42,\n      columnNumber: 10,\n      filePath: '/path/to/file.yaml',\n      duration: 1500\n    };\n\n    // 全フィールドが適切な型であることを確認\n    expect(typeof testErrorDetails.originalError).toBe('string');\n    expect(typeof testErrorDetails.fileSize).toBe('number');\n    expect(typeof testErrorDetails.lineNumber).toBe('number');\n    expect(typeof testErrorDetails.columnNumber).toBe('number');\n    expect(typeof testErrorDetails.filePath).toBe('string');\n    expect(typeof testErrorDetails.duration).toBe('number');\n  });\n\n  // ResourceType enumの型安全性\n  it('should provide type-safe resource type enum', () => {\n    // enum値の型安全アクセス\n    expect(ResourceType.RDS_DB_INSTANCE).toBe('AWS::RDS::DBInstance');\n    expect(ResourceType.LAMBDA_FUNCTION).toBe('AWS::Lambda::Function');\n    expect(ResourceType.ECS_SERVICE).toBe('AWS::ECS::Service');\n    \n    // Object.values()で全リソースタイプ取得可能\n    const allTypes = Object.values(ResourceType);\n    expect(allTypes).toHaveLength(8);\n    expect(allTypes).toContain('AWS::RDS::DBInstance');\n    expect(allTypes).toContain('AWS::Lambda::Function');\n  });\n});"],"version":3}