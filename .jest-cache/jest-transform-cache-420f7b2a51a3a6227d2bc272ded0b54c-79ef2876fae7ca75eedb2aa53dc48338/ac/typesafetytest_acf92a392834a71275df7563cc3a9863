cbb19ee92c3dbfae41e83af4926c8317
"use strict";
// CLAUDE.md準拠 型安全性包括テスト（BLUE段階: リファクタリング検証）
Object.defineProperty(exports, "__esModule", { value: true });
const cloudformation_1 = require("../../../src/types/cloudformation");
describe('型安全性包括テスト（CLAUDE.md BLUE段階）', () => {
    // Union型の型ナロウイング検証
    it('should properly narrow union types with type guards', () => {
        const testResources = [
            {
                Type: 'AWS::RDS::DBInstance',
                Properties: { Engine: 'mysql', DBInstanceClass: 'db.t3.micro' }
            },
            {
                Type: 'AWS::Lambda::Function',
                Properties: { Runtime: 'nodejs20.x', MemorySize: 256 }
            },
            {
                Type: 'AWS::EC2::Instance', // 非サポート
                Properties: { InstanceType: 't3.micro' }
            }
        ];
        // 型ガード関数での型ナロウイング
        const rdsResources = testResources.filter(cloudformation_1.isRDSInstance);
        const lambdaResources = testResources.filter(cloudformation_1.isLambdaFunction);
        const supportedResources = testResources.filter(cloudformation_1.isSupportedResource);
        expect(rdsResources).toHaveLength(1);
        expect(lambdaResources).toHaveLength(1);
        expect(supportedResources).toHaveLength(2); // EC2は除外
        // 型安全性：型ナロウイング後はプロパティアクセス可能
        if (rdsResources.length > 0) {
            const rds = rdsResources[0];
            // TypeScriptの型推論でRDSDBInstance型として認識される
            expect(rds.Type).toBe('AWS::RDS::DBInstance');
        }
    });
    // ECS Fargate判定の型安全性
    it('should safely detect Fargate services', () => {
        const fargateService = {
            Type: 'AWS::ECS::Service',
            Properties: {
                LaunchType: 'FARGATE',
                TaskDefinition: 'test-task'
            }
        };
        const ec2Service = {
            Type: 'AWS::ECS::Service',
            Properties: {
                LaunchType: 'EC2'
            }
        };
        expect((0, cloudformation_1.isFargateService)(fargateService)).toBe(true);
        expect((0, cloudformation_1.isFargateService)(ec2Service)).toBe(false);
    });
    // ALB vs NLB判定の型安全性
    it('should safely detect Application Load Balancers', () => {
        const alb = {
            Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer',
            Properties: {
                Type: 'application'
            }
        };
        const nlb = {
            Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer',
            Properties: {
                Type: 'network'
            }
        };
        expect((0, cloudformation_1.isApplicationLoadBalancer)(alb)).toBe(true);
        expect((0, cloudformation_1.isApplicationLoadBalancer)(nlb)).toBe(false);
    });
    // メトリクス型の安全性（しきい値計算）
    it('should ensure metric thresholds are type safe', () => {
        const testMetric = {
            metric_name: 'CPUUtilization',
            namespace: 'AWS/RDS',
            unit: 'Percent',
            description: 'CPU使用率',
            statistic: 'Average',
            recommended_threshold: {
                warning: 70,
                critical: 90
            },
            evaluation_period: 300,
            category: 'Performance',
            importance: 'High'
        };
        // しきい値の妥当性（カスタムマッチャー使用）
        expect(testMetric.recommended_threshold).toHaveValidThreshold();
        // 型安全性：コンパイル時に型チェック済み
        expect(testMetric.statistic).toBe('Average');
        expect(testMetric.category).toBe('Performance');
        expect(testMetric.importance).toBe('High');
    });
    // エラー型の安全性
    it('should define type-safe error interfaces', () => {
        const testErrorDetails = {
            originalError: 'test error',
            fileSize: 1024,
            lineNumber: 42,
            columnNumber: 10,
            filePath: '/path/to/file.yaml',
            duration: 1500
        };
        // 全フィールドが適切な型であることを確認
        expect(typeof testErrorDetails.originalError).toBe('string');
        expect(typeof testErrorDetails.fileSize).toBe('number');
        expect(typeof testErrorDetails.lineNumber).toBe('number');
        expect(typeof testErrorDetails.columnNumber).toBe('number');
        expect(typeof testErrorDetails.filePath).toBe('string');
        expect(typeof testErrorDetails.duration).toBe('number');
    });
    // ResourceType enumの型安全性
    it('should provide type-safe resource type enum', () => {
        // enum値の型安全アクセス
        expect(cloudformation_1.ResourceType.RDS_DB_INSTANCE).toBe('AWS::RDS::DBInstance');
        expect(cloudformation_1.ResourceType.LAMBDA_FUNCTION).toBe('AWS::Lambda::Function');
        expect(cloudformation_1.ResourceType.ECS_SERVICE).toBe('AWS::ECS::Service');
        // Object.values()で全リソースタイプ取得可能
        const allTypes = Object.values(cloudformation_1.ResourceType);
        expect(allTypes).toHaveLength(8);
        expect(allTypes).toContain('AWS::RDS::DBInstance');
        expect(allTypes).toContain('AWS::Lambda::Function');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,