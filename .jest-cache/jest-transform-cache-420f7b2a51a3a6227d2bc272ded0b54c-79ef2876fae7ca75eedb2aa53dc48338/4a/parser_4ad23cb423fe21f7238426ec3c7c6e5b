2ff1dbc18de445f457fd7610fa050442
"use strict";
// CLAUDE.md準拠TemplateParser（Don't Reinvent the Wheel + Type-Driven Development）
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileReader = exports.TemplateParser = void 0;
exports.isJSONFile = isJSONFile;
exports.isYAMLFile = isYAMLFile;
exports.isSupportedTemplateFile = isSupportedTemplateFile;
const yaml_1 = require("yaml");
const error_1 = require("../utils/error");
// UNIX Philosophy: 一つのことをうまくやる（CloudFormation解析のみ）
class TemplateParser {
    // メイン解析メソッド（型安全性重視）
    async parse(filePath) {
        try {
            // 1. ファイル検証（CLAUDE.md: Type-Driven Development）
            await this.validateFile(filePath);
            // 2. ファイル読み込み（パフォーマンス監視）
            const content = await this.readFile(filePath);
            // 3. フォーマット判定・解析（Don't Reinvent: yamlライブラリ使用）
            const template = this.parseContent(content, filePath);
            // 4. CloudFormation構造検証
            this.validateTemplateStructure(template, filePath);
            return template;
        }
        catch (error) {
            // 既存エラーハンドリングシステム活用
            if (error instanceof error_1.CloudSupporterError) {
                throw error;
            }
            throw (0, error_1.createFileError)(`Failed to parse template: ${error.message}`, filePath, { originalError: error.message });
        }
    }
    // ファイル存在・サイズ・権限検証（型安全性）
    async validateFile(filePath) {
        const fs = await Promise.resolve().then(() => __importStar(require('fs/promises')));
        try {
            const stats = await fs.stat(filePath);
            // ファイル種別確認
            if (!stats.isFile()) {
                throw (0, error_1.createFileError)(`Path is not a file: ${filePath}`, filePath);
            }
            // サイズ制限確認（50MB）
            const maxSize = 50 * 1024 * 1024; // 50MB
            if (stats.size > maxSize) {
                throw (0, error_1.createFileError)(`File too large: ${(stats.size / 1024 / 1024).toFixed(1)}MB (max: 50MB)`, filePath, { fileSize: stats.size });
            }
        }
        catch (error) {
            if (error instanceof error_1.CloudSupporterError)
                throw error;
            // ファイルアクセスエラー（ENOENT等）
            const nodeError = error;
            throw (0, error_1.createFileError)(`Cannot access file: ${nodeError.code}`, filePath, { error: nodeError.code });
        }
    }
    // ファイル読み込み（時間制限・メモリ効率）
    async readFile(filePath) {
        const fs = await Promise.resolve().then(() => __importStar(require('fs/promises')));
        try {
            const startTime = performance.now();
            const content = await fs.readFile(filePath, 'utf8');
            const duration = performance.now() - startTime;
            // 読み込み時間制限（5秒）
            if (duration > 5000) {
                throw (0, error_1.createFileError)(`File reading timeout: ${duration.toFixed(0)}ms (max: 5000ms)`, filePath, { duration: Math.round(duration) });
            }
            return content;
        }
        catch (error) {
            if (error instanceof error_1.CloudSupporterError)
                throw error;
            const nodeError = error;
            throw (0, error_1.createFileError)(`Failed to read file: ${nodeError.message}`, filePath, { originalError: nodeError.message });
        }
    }
    // コンテンツ解析（CLAUDE.md: Don't Reinvent the Wheel）
    parseContent(content, filePath) {
        const isJSON = filePath.toLowerCase().endsWith('.json');
        try {
            if (isJSON) {
                // JSON解析（標準JSON.parse使用）
                return JSON.parse(content);
            }
            else {
                // YAML解析（yamlライブラリ使用）
                return (0, yaml_1.parse)(content);
            }
        }
        catch (error) {
            // 構文エラー詳細抽出
            const errorDetails = this.extractSyntaxError(error, content, isJSON);
            throw (0, error_1.createParseError)(`${isJSON ? 'JSON' : 'YAML'} syntax error: ${error.message}`, filePath, errorDetails.lineNumber, errorDetails);
        }
    }
    // 構文エラー詳細抽出（型安全、CLAUDE.md: No any types）
    extractSyntaxError(error, content, isJSON) {
        if (isJSON && error instanceof SyntaxError) {
            // JSON構文エラー詳細抽出
            const positionMatch = error.message.match(/position (\d+)/);
            if (positionMatch) {
                const position = parseInt(positionMatch[1], 10);
                const lines = content.substring(0, position).split('\n');
                const lineNumber = lines.length;
                const columnNumber = lines[lines.length - 1]?.length || 0;
                const nearText = content.substring(Math.max(0, position - 50), Math.min(content.length, position + 50));
                return { lineNumber, columnNumber, nearText };
            }
        }
        else if (!isJSON && error instanceof yaml_1.YAMLException) {
            // YAML構文エラー詳細（yamlライブラリ提供）
            const yamlError = error;
            return {
                lineNumber: yamlError.linePos?.[0]?.line,
                columnNumber: yamlError.linePos?.[0]?.col,
                nearText: yamlError.linePos?.[0]?.text
            };
        }
        // フォールバック（基本的なエラー情報のみ）
        return {
            nearText: error.message
        };
    }
    // CloudFormation構造検証（型安全性）
    validateTemplateStructure(template, filePath) {
        // 基本オブジェクト検証
        if (!template || typeof template !== 'object') {
            throw (0, error_1.createParseError)('Template must be a valid object', filePath);
        }
        const cfnTemplate = template;
        // Resources セクション必須検証
        if (!cfnTemplate.Resources || typeof cfnTemplate.Resources !== 'object') {
            throw (0, error_1.createParseError)('Template must contain "Resources" section', filePath, undefined, {
                nearText: 'CloudFormation template requires "Resources" section with at least one resource'
            });
        }
        // AWSTemplateFormatVersion 警告（必須ではないが推奨）
        if (!cfnTemplate.AWSTemplateFormatVersion) {
            console.warn('\x1b[33m⚠️  Missing AWSTemplateFormatVersion, assuming 2010-09-09\x1b[0m');
        }
        // Resourcesが空でないことを確認
        const resources = cfnTemplate.Resources;
        if (Object.keys(resources).length === 0) {
            throw (0, error_1.createParseError)('Template Resources section is empty', filePath, undefined, {
                nearText: 'CloudFormation template must contain at least one resource definition'
            });
        }
        // 各リソースの基本構造検証
        for (const [logicalId, resource] of Object.entries(resources)) {
            if (!resource || typeof resource !== 'object') {
                throw (0, error_1.createParseError)(`Resource "${logicalId}" must be an object`, filePath, undefined, { nearText: `Resource ${logicalId} has invalid structure` });
            }
            const resourceObj = resource;
            if (!resourceObj.Type || typeof resourceObj.Type !== 'string') {
                throw (0, error_1.createParseError)(`Resource "${logicalId}" missing required "Type" property`, filePath, undefined, { nearText: `Resource ${logicalId} must have a Type property (e.g., "AWS::S3::Bucket")` });
            }
        }
    }
}
exports.TemplateParser = TemplateParser;
// ファイル読み込み専用ユーティリティ（CLAUDE.md: UNIX Philosophy）
class FileReader {
    // 静的メソッド（状態を持たないシンプル設計）
    static async readText(filePath) {
        try {
            const fs = await Promise.resolve().then(() => __importStar(require('fs/promises')));
            return await fs.readFile(filePath, 'utf8');
        }
        catch (error) {
            const nodeError = error;
            throw (0, error_1.createFileError)(`Failed to read file: ${nodeError.message}`, filePath, { error: nodeError.code });
        }
    }
    // ファイル統計情報取得
    static async getStats(filePath) {
        try {
            const fs = await Promise.resolve().then(() => __importStar(require('fs/promises')));
            const stats = await fs.stat(filePath);
            return {
                size: stats.size,
                isFile: stats.isFile()
            };
        }
        catch (error) {
            const nodeError = error;
            throw (0, error_1.createFileError)(`Cannot access file: ${nodeError.code}`, filePath, { error: nodeError.code });
        }
    }
}
exports.FileReader = FileReader;
// 型安全なファイル形式検証（CLAUDE.md: Type-Driven Development）
function isJSONFile(filePath) {
    return filePath.toLowerCase().endsWith('.json');
}
function isYAMLFile(filePath) {
    const lowerPath = filePath.toLowerCase();
    return lowerPath.endsWith('.yaml') || lowerPath.endsWith('.yml');
}
function isSupportedTemplateFile(filePath) {
    return isJSONFile(filePath) || isYAMLFile(filePath);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,