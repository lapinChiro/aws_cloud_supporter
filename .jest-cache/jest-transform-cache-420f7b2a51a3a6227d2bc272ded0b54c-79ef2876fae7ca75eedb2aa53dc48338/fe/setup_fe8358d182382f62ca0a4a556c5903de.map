{"file":"/home/kyohei/aws_cloud_supporter/tests/setup.ts","mappings":";AAAA,kCAAkC;;AAclC,eAAe;AACf,MAAM,CAAC,MAAM,CAAC;IACZ,YAAY;IACZ,eAAe,CAAC,QAAmB,EAAE,UAAkB;QACrD,MAAM,OAAO,GAAG,QAA0C,CAAC;QAC3D,MAAM,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,KAAK,UAAU,CAAC,CAAC;QAElE,OAAO;YACL,OAAO,EAAE,GAAG,EAAE,CACZ,SAAS;gBACP,CAAC,CAAC,mCAAmC,UAAU,EAAE;gBACjD,CAAC,CAAC,+BAA+B,UAAU,gBAAgB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAC3G,IAAI,EAAE,SAAS;SAChB,CAAC;IACJ,CAAC;IAED,gDAAgD;IAChD,oBAAoB,CAAC,QAAiB;QACpC,MAAM,SAAS,GAAG,QAAiD,CAAC;QAEpE,MAAM,OAAO,GACX,OAAO,SAAS,CAAC,OAAO,KAAK,QAAQ;YACrC,OAAO,SAAS,CAAC,QAAQ,KAAK,QAAQ;YACtC,SAAS,CAAC,OAAO,GAAG,SAAS,CAAC,QAAQ;YACtC,SAAS,CAAC,OAAO,GAAG,CAAC;YACrB,SAAS,CAAC,QAAQ,GAAG,CAAC,CAAC;QAEzB,OAAO;YACL,OAAO,EAAE,GAAG,EAAE,CACZ,OAAO;gBACL,CAAC,CAAC,kCAAkC;gBACpC,CAAC,CAAC,yEAAyE,SAAS,CAAC,OAAO,cAAc,SAAS,CAAC,QAAQ,EAAE;YAClI,IAAI,EAAE,OAAO;SACd,CAAC;IACJ,CAAC;IAED,0BAA0B;IAC1B,+BAA+B,CAAC,QAAiB;QAC/C,MAAM,QAAQ,GAAG,QAAkD,CAAC;QAEpE,MAAM,OAAO,GACX,OAAO,QAAQ,CAAC,IAAI,KAAK,QAAQ;YACjC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;YACjC,CAAC,QAAQ,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,QAAQ,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC;QAEjF,OAAO;YACL,OAAO,EAAE,GAAG,EAAE,CACZ,OAAO;gBACL,CAAC,CAAC,0CAA0C;gBAC5C,CAAC,CAAC,gDAAgD,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE;YACzF,IAAI,EAAE,OAAO;SACd,CAAC;IACJ,CAAC;IAED,kCAAkC;IAClC,gBAAgB,CAAC,QAAgB;QAC/B,MAAM,WAAW,GAAG,QAAQ,CAAC;QAC7B,MAAM,UAAU,GAAG,0BAA0B,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEhE,OAAO;YACL,OAAO,EAAE,GAAG,EAAE,CACZ,UAAU;gBACR,CAAC,CAAC,qEAAqE;gBACvE,CAAC,CAAC,sCAAsC;YAC5C,IAAI,EAAE,CAAC,UAAU;SAClB,CAAC;IACJ,CAAC;CACF,CAAC,CAAC;AAEH,cAAc;AACd,SAAS,CAAC,GAAG,EAAE;IACb,qBAAqB;IACrB,OAAO,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC;AAEH,cAAc;AACd,QAAQ,CAAC,GAAG,EAAE;IACZ,aAAa;IACb,IAAI,MAAM,CAAC,EAAE,EAAE,CAAC;QACd,MAAM,CAAC,EAAE,EAAE,CAAC;IACd,CAAC;AACH,CAAC,CAAC,CAAC","names":[],"sources":["/home/kyohei/aws_cloud_supporter/tests/setup.ts"],"sourcesContent":["// CLAUDE.mdÊ∫ñÊã†„Ç´„Çπ„Çø„É†„Éû„ÉÉ„ÉÅ„É£„ÉºÔºàÂûãÂÆâÂÖ®„ÄÅTDDÊîØÊè¥Ôºâ\n\n// ÂûãÂÆâÂÖ®„Å™„Ç´„Çπ„Çø„É†„Éû„ÉÉ„ÉÅ„É£„ÉºÂÆöÁæ©\ndeclare global {\n  namespace jest {\n    interface Matchers<R> {\n      toContainMetric(metricName: string): R;\n      toHaveValidThreshold(): R;\n      toBeValidCloudFormationResource(): R;\n      toHaveNoAnyTypes(): R; // CLAUDE.md: No any typesÊ§úË®º\n    }\n  }\n}\n\n// „É°„Éà„É™„ÇØ„ÇπÊ§úË®º„Éû„ÉÉ„ÉÅ„É£„Éº\nexpect.extend({\n  // „É°„Éà„É™„ÇØ„ÇπÂ≠òÂú®Á¢∫Ë™ç\n  toContainMetric(received: unknown[], metricName: string) {\n    const metrics = received as Array<{ metric_name: string }>;\n    const hasMetric = metrics.some(m => m.metric_name === metricName);\n    \n    return {\n      message: () => \n        hasMetric \n          ? `Expected metrics NOT to contain ${metricName}`\n          : `Expected metrics to contain ${metricName}. Available: ${metrics.map(m => m.metric_name).join(', ')}`,\n      pass: hasMetric,\n    };\n  },\n\n  // „Åó„Åç„ÅÑÂÄ§Â¶•ÂΩìÊÄßÊ§úË®ºÔºàCLAUDE.md: Type-Driven DevelopmentÔºâ\n  toHaveValidThreshold(received: unknown) {\n    const threshold = received as { warning: number; critical: number };\n    \n    const isValid = \n      typeof threshold.warning === 'number' &&\n      typeof threshold.critical === 'number' &&\n      threshold.warning < threshold.critical &&\n      threshold.warning > 0 &&\n      threshold.critical > 0;\n    \n    return {\n      message: () => \n        isValid \n          ? `Expected threshold to be invalid`\n          : `Expected valid threshold (warning < critical, both > 0). Got: warning=${threshold.warning}, critical=${threshold.critical}`,\n      pass: isValid,\n    };\n  },\n\n  // CloudFormation„É™„ÇΩ„Éº„ÇπÂ¶•ÂΩìÊÄßÊ§úË®º\n  toBeValidCloudFormationResource(received: unknown) {\n    const resource = received as { Type: string; Properties?: unknown };\n    \n    const isValid = \n      typeof resource.Type === 'string' &&\n      resource.Type.startsWith('AWS::') &&\n      (resource.Properties === undefined || typeof resource.Properties === 'object');\n    \n    return {\n      message: () => \n        isValid \n          ? `Expected invalid CloudFormation resource`\n          : `Expected valid CloudFormation resource. Got: ${JSON.stringify(resource, null, 2)}`,\n      pass: isValid,\n    };\n  },\n\n  // CLAUDE.md: No any types Ê§úË®º„Éû„ÉÉ„ÉÅ„É£„Éº\n  toHaveNoAnyTypes(received: string) {\n    const codeContent = received;\n    const hasAnyType = /:\\s*any(\\s|;|,|\\)|]|}|$)/.test(codeContent);\n    \n    return {\n      message: () => \n        hasAnyType \n          ? `Expected code to have no 'any' types (CLAUDE.md violation detected)`\n          : `Expected code to contain 'any' types`,\n      pass: !hasAnyType,\n    };\n  }\n});\n\n// „ÉÜ„Çπ„ÉàÁí∞Â¢É„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó\nbeforeAll(() => {\n  // ÂÖ®„ÉÜ„Çπ„Éà„ÅßCLAUDE.mdÊ∫ñÊã†Á¢∫Ë™ç\n  console.log('üß™ Jest Test Environment Setup - CLAUDE.mdÊ∫ñÊã†');\n});\n\n// „ÉÜ„Çπ„ÉàÂæå„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó\nafterAll(() => {\n  // „É°„É¢„É™„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó\n  if (global.gc) {\n    global.gc();\n  }\n});\n\n// TypeScriptÂûãÂÆâÂÖ®ÊÄß„ÅÆÁ¢∫‰øù\nexport {};"],"version":3}