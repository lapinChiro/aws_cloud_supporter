{"file":"/home/kyohei/aws_cloud_supporter/tests/unit/core/parser-performance.test.ts","mappings":"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","names":[],"sources":["/home/kyohei/aws_cloud_supporter/tests/unit/core/parser-performance.test.ts"],"sourcesContent":["// CLAUDE.md準拠TemplateParserパフォーマンス最適化テスト（BLUE段階）\n\nimport { TemplateParser, FileReader } from '../../../src/core/parser';\nimport { writeFileSync, mkdirSync } from 'fs';\nimport path from 'path';\nimport { tmpdir } from 'os';\n\ndescribe('TemplateParser最適化（CLAUDE.md: BLUE段階）', () => {\n  let tempDir: string;\n\n  beforeAll(() => {\n    tempDir = path.join(tmpdir(), 'aws-cloud-supporter-perf-test');\n    try {\n      mkdirSync(tempDir, { recursive: true });\n    } catch {\n      // 既存の場合は無視\n    }\n  });\n\n  // FileReaderユーティリティクラスのテスト（UNIX Philosophy: 分離）\n  it('should provide efficient file reading utilities', async () => {\n    // テストファイル作成\n    const testContent = 'AWSTemplateFormatVersion: \"2010-09-09\"\\nResources:\\n  Test:\\n    Type: AWS::S3::Bucket';\n    const testPath = path.join(tempDir, 'test-file-reader.yaml');\n    writeFileSync(testPath, testContent, 'utf8');\n\n    // FileReader.readText テスト\n    const content = await FileReader.readText(testPath);\n    expect(content).toBe(testContent);\n\n    // FileReader.getStats テスト\n    const stats = await FileReader.getStats(testPath);\n    expect(stats.isFile).toBe(true);\n    expect(stats.size).toBeGreaterThan(0);\n  });\n\n  // ファイル形式判定関数テスト（型安全性）\n  it('should accurately detect file formats', () => {\n    const { isJSONFile, isYAMLFile, isSupportedTemplateFile } = require('../../../src/core/parser');\n\n    expect(isJSONFile('template.json')).toBe(true);\n    expect(isJSONFile('template.JSON')).toBe(true); // 大文字小文字対応\n    expect(isJSONFile('template.yaml')).toBe(false);\n\n    expect(isYAMLFile('template.yaml')).toBe(true);\n    expect(isYAMLFile('template.yml')).toBe(true);\n    expect(isYAMLFile('template.YAML')).toBe(true); // 大文字小文字対応\n    expect(isYAMLFile('template.json')).toBe(false);\n\n    expect(isSupportedTemplateFile('template.json')).toBe(true);\n    expect(isSupportedTemplateFile('template.yaml')).toBe(true);\n    expect(isSupportedTemplateFile('template.txt')).toBe(false);\n  });\n\n  // 型安全性の向上テスト\n  it('should demonstrate improved type safety', async () => {\n    const parser = new TemplateParser();\n    const testTemplate = `\nAWSTemplateFormatVersion: '2010-09-09'\nResources:\n  TestDB:\n    Type: AWS::RDS::DBInstance\n    Properties:\n      Engine: postgresql\n      DBInstanceClass: db.r5.large\n`;\n    \n    const testPath = path.join(tempDir, 'type-safety-test.yaml');\n    writeFileSync(testPath, testTemplate, 'utf8');\n\n    const template = await parser.parse(testPath);\n\n    // TypeScript型推論の活用\n    expect(template.AWSTemplateFormatVersion).toBe('2010-09-09');\n    \n    // リソース型の型安全アクセス\n    const testDB = template.Resources.TestDB;\n    expect(testDB.Type).toBe('AWS::RDS::DBInstance');\n    \n    // Propertiesは型安全（unknownだが構造化アクセス可能）\n    if (testDB.Properties && typeof testDB.Properties === 'object') {\n      const props = testDB.Properties as Record<string, unknown>;\n      expect(props.Engine).toBe('postgresql');\n      expect(props.DBInstanceClass).toBe('db.r5.large');\n    }\n  });\n\n  // エラーハンドリングの最適化テスト\n  it('should provide optimized error handling', async () => {\n    const parser = new TemplateParser();\n    \n    // Resourcesセクションが無い場合\n    const noResourcesTemplate = `\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Template without Resources section'\n`;\n    \n    const noResourcesPath = path.join(tempDir, 'no-resources.yaml');\n    writeFileSync(noResourcesPath, noResourcesTemplate, 'utf8');\n\n    try {\n      await parser.parse(noResourcesPath);\n    } catch (error) {\n      expect(error.type).toBe('PARSE_ERROR');\n      expect(error.message).toContain('Resources');\n      expect(error.filePath).toBe(noResourcesPath);\n      \n      const structured = error.toStructuredOutput();\n      expect(structured.timestamp).toBeDefined();\n    }\n  });\n\n  // 大規模テンプレートの効率的処理\n  it('should handle moderately large templates efficiently', async () => {\n    const parser = new TemplateParser();\n    \n    // 中規模テンプレート（1000リソース程度）\n    const mediumTemplate = {\n      AWSTemplateFormatVersion: \"2010-09-09\",\n      Description: \"Medium size template\",\n      Resources: {} as Record<string, unknown>\n    };\n    \n    for (let i = 0; i < 1000; i++) {\n      mediumTemplate.Resources[`TestBucket${i}`] = {\n        Type: \"AWS::S3::Bucket\",\n        Properties: {\n          BucketName: `test-bucket-${i}`\n        }\n      };\n    }\n    \n    const mediumPath = path.join(tempDir, 'medium-template.json');\n    writeFileSync(mediumPath, JSON.stringify(mediumTemplate, null, 2), 'utf8');\n    \n    const startTime = performance.now();\n    const template = await parser.parse(mediumPath);\n    const duration = performance.now() - startTime;\n    \n    expect(duration).toBeLessThan(2000); // 2秒以内\n    expect(Object.keys(template.Resources)).toHaveLength(1000);\n  });\n\n  // インターフェース型安全性テスト（CLAUDE.md: Interface Segregation）\n  it('should implement ITemplateParser interface correctly', () => {\n    const parser = new TemplateParser();\n    \n    // インターフェース実装確認\n    expect(typeof parser.parse).toBe('function');\n    expect(parser.parse.length).toBe(1); // 引数1個\n    \n    // SOLID Interface Segregation原則確認\n    // TemplateParserは解析のみに特化\n    const parserMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(parser));\n    const publicMethods = parserMethods.filter(method => !method.startsWith('_') && method !== 'constructor');\n    \n    expect(publicMethods).toContain('parse');\n    expect(publicMethods.length).toBe(1); // parseメソッドのみpublic\n  });\n});"],"version":3}