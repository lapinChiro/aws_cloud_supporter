{"file":"/home/kyohei/aws_cloud_supporter/tests/unit/core/parser.test.ts","mappings":"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","names":[],"sources":["/home/kyohei/aws_cloud_supporter/tests/unit/core/parser.test.ts"],"sourcesContent":["// CLAUDE.md準拠TemplateParserテスト（RED段階: Don't Reinvent the Wheel + Type-Driven）\n\nimport { readFileSync, writeFileSync, mkdirSync } from 'fs';\nimport path from 'path';\nimport { tmpdir } from 'os';\n\ndescribe('TemplateParser型安全解析（CLAUDE.md: TDD RED段階）', () => {\n\n  // RED段階: TemplateParserが存在しないことを確認\n  it('should fail until TemplateParser is implemented', () => {\n    expect(() => {\n      require('../../../src/core/parser');\n    }).toThrow(); // まだファイル未実装で失敗\n  });\n\n  // YAML解析テスト（実装前失敗想定）\n  it('should parse valid YAML CloudFormation template', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // JSON解析テスト（実装前失敗想定）\n  it('should parse valid JSON CloudFormation template', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // ファイル存在エラーテスト（実装前失敗想定）\n  it('should handle file not found error', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // ファイルサイズ制限テスト（50MB制限、実装前失敗想定）\n  it('should reject files larger than 50MB', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // 読み込み時間制限テスト（5秒制限、実装前失敗想定）\n  it('should timeout file reading after 5 seconds', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // YAML構文エラーハンドリングテスト（実装前失敗想定）\n  it('should provide detailed YAML syntax error', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // JSON構文エラーハンドリングテスト（実装前失敗想定）\n  it('should provide detailed JSON syntax error with position', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // CloudFormation構造検証テスト（実装前失敗想定）\n  it('should validate CloudFormation template structure', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // any型使用禁止テスト\n  it('should not use any types in parser implementation', () => {\n    // ファイルが存在しないので失敗する想定\n    try {\n      const parserCode = readFileSync(\n        path.join(__dirname, '../../../src/core/parser.ts'),\n        'utf8'\n      );\n      expect(parserCode).toHaveNoAnyTypes();\n    } catch {\n      expect(true).toBe(false); // ファイル未実装で失敗（RED段階）\n    }\n  });\n\n  // 型安全性テスト（実装前失敗想定）\n  it('should return properly typed CloudFormationTemplate', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n});\n\ndescribe('TemplateParserパフォーマンステスト（CLAUDE.md: 性能要件）', () => {\n\n  // パフォーマンス要件テスト（実装前失敗想定）\n  it('should parse large template within 5 seconds', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // メモリ効率テスト（実装前失敗想定）  \n  it('should handle large files efficiently without memory leaks', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // 並行解析テスト（実装前失敗想定）\n  it('should handle concurrent parsing requests safely', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n});\n\ndescribe('TemplateParserエラーハンドリング統合（CLAUDE.md: 型安全エラー処理）', () => {\n\n  // 既実装エラーハンドリングとの統合テスト（実装前失敗想定）\n  it('should integrate with CloudSupporterError system', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // エラー提案メッセージテスト（実装前失敗想定）\n  it('should provide helpful error suggestions', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n\n  // 構造化エラー出力テスト（実装前失敗想定）\n  it('should output structured error information', async () => {\n    expect(true).toBe(false); // 意図的に失敗（RED段階）\n  });\n});\n\n// RED段階用テストヘルパー（失敗確認用）\ndescribe('テストヘルパー準備（RED段階）', () => {\n  let tempDir: string;\n\n  beforeAll(() => {\n    // 一時ディレクトリ作成\n    tempDir = path.join(tmpdir(), 'aws-cloud-supporter-test');\n    try {\n      mkdirSync(tempDir, { recursive: true });\n    } catch {\n      // 既に存在する場合は無視\n    }\n  });\n\n  // 有効なYAMLテンプレート用テストデータ作成\n  it('should create test fixtures for YAML templates', () => {\n    const validYamlTemplate = `\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Test CloudFormation template'\nResources:\n  TestDB:\n    Type: AWS::RDS::DBInstance\n    Properties:\n      Engine: mysql\n      DBInstanceClass: db.t3.micro\n      AllocatedStorage: 20\n  TestFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Runtime: nodejs20.x\n      Handler: index.handler\n      Code:\n        ZipFile: 'exports.handler = async () => ({ statusCode: 200 });'\n`;\n\n    const yamlPath = path.join(tempDir, 'valid-template.yaml');\n    writeFileSync(yamlPath, validYamlTemplate, 'utf8');\n    \n    expect(readFileSync(yamlPath, 'utf8')).toContain('AWSTemplateFormatVersion');\n  });\n\n  // 有効なJSONテンプレート用テストデータ作成\n  it('should create test fixtures for JSON templates', () => {\n    const validJsonTemplate = {\n      \"AWSTemplateFormatVersion\": \"2010-09-09\",\n      \"Description\": \"Test CloudFormation JSON template\",\n      \"Resources\": {\n        \"TestBucket\": {\n          \"Type\": \"AWS::S3::Bucket\",\n          \"Properties\": {\n            \"BucketName\": \"test-bucket\"\n          }\n        },\n        \"TestAPI\": {\n          \"Type\": \"AWS::ApiGateway::RestApi\", \n          \"Properties\": {\n            \"Name\": \"test-api\"\n          }\n        }\n      }\n    };\n\n    const jsonPath = path.join(tempDir, 'valid-template.json');\n    writeFileSync(jsonPath, JSON.stringify(validJsonTemplate, null, 2), 'utf8');\n    \n    expect(JSON.parse(readFileSync(jsonPath, 'utf8'))).toHaveProperty('Resources');\n  });\n\n  // 無効なYAMLテンプレート用テストデータ作成（構文エラー）\n  it('should create invalid YAML test fixture', () => {\n    const invalidYamlTemplate = `\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Invalid YAML template'\nResources:\n  TestDB:\n    Type: AWS::RDS::DBInstance\n    Properties:\n      Engine: mysql\n      # 不正なインデント\n    DBInstanceClass: db.t3.micro\n`;\n\n    const invalidYamlPath = path.join(tempDir, 'invalid-syntax.yaml');\n    writeFileSync(invalidYamlPath, invalidYamlTemplate, 'utf8');\n    \n    expect(readFileSync(invalidYamlPath, 'utf8')).toContain('不正なインデント');\n  });\n\n  // 無効なJSONテンプレート用テストデータ作成（構文エラー）\n  it('should create invalid JSON test fixture', () => {\n    const invalidJsonTemplate = `{\n  \"AWSTemplateFormatVersion\": \"2010-09-09\",\n  \"Description\": \"Invalid JSON template\",\n  \"Resources\": {\n    \"TestBucket\": {\n      \"Type\": \"AWS::S3::Bucket\",\n      \"Properties\": {\n        \"BucketName\": \"test-bucket\"\n      }\n    }, // 不正なカンマ\n  }\n}`;\n\n    const invalidJsonPath = path.join(tempDir, 'invalid-syntax.json');\n    writeFileSync(invalidJsonPath, invalidJsonTemplate, 'utf8');\n    \n    expect(readFileSync(invalidJsonPath, 'utf8')).toContain('不正なカンマ');\n  });\n\n  // 大きなファイル用テストデータ作成（サイズ制限テスト用）\n  it('should create large file test fixture', () => {\n    const largeTemplate = {\n      AWSTemplateFormatVersion: \"2010-09-09\",\n      Description: \"Large template for size testing\",\n      Resources: {}\n    };\n\n    // 大量のリソースを生成（50MB超を模擬）\n    for (let i = 0; i < 10000; i++) {\n      largeTemplate.Resources[`Resource${i}`] = {\n        Type: \"AWS::S3::Bucket\",\n        Properties: {\n          BucketName: `bucket-${i}`,\n          Description: `Test bucket number ${i} for large template size testing with long description to increase file size significantly`\n        }\n      };\n    }\n\n    const largePath = path.join(tempDir, 'large-template.json');\n    writeFileSync(largePath, JSON.stringify(largeTemplate, null, 2), 'utf8');\n    \n    const stats = require('fs').statSync(largePath);\n    expect(stats.size).toBeGreaterThan(1024 * 1024); // 1MB以上\n  });\n});"],"version":3}