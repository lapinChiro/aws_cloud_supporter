{"file":"/home/kyohei/aws_cloud_supporter/src/utils/logger.ts","mappings":"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","names":[],"sources":["/home/kyohei/aws_cloud_supporter/src/utils/logger.ts"],"sourcesContent":["// CLAUDE.md準拠Logger（KISS原則、シンプル実装）\n\n// 型安全なログレベル定義（CLAUDE.md: No any types）\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\n// シンプルな色付き出力（CLAUDE.md: KISS、外部依存最小化）\nconst colors = {\n  debug: (text: string) => `\\x1b[36m${text}\\x1b[0m`, // cyan\n  info: (text: string) => `\\x1b[32m${text}\\x1b[0m`,  // green\n  warn: (text: string) => `\\x1b[33m${text}\\x1b[0m`,  // yellow\n  error: (text: string) => `\\x1b[31m${text}\\x1b[0m`, // red\n  success: (text: string) => `\\x1b[92m${text}\\x1b[0m` // bright green\n};\n\n// ILoggerインターフェース（CLAUDE.md: Interface Segregation）\nexport interface ILogger {\n  debug(message: string, ...args: unknown[]): void;\n  info(message: string, ...args: unknown[]): void;\n  warn(message: string, ...args: unknown[]): void;\n  error(message: string, error?: Error, ...args: unknown[]): void;\n  success(message: string, ...args: unknown[]): void;\n}\n\n// CLAUDE.md準拠Loggerクラス（UNIX Philosophy: 一つのことをうまくやる）\nexport class Logger implements ILogger {\n  constructor(\n    private level: LogLevel = 'info',\n    private useColors: boolean = true\n  ) {}\n\n  // デバッグメッセージ（開発時用）\n  debug(message: string, ...args: unknown[]): void {\n    if (this.shouldLog('debug')) {\n      this.output('debug', `🐛 ${message}`, ...args);\n    }\n  }\n\n  // 情報メッセージ（通常運用）\n  info(message: string, ...args: unknown[]): void {\n    if (this.shouldLog('info')) {\n      this.output('info', `ℹ️  ${message}`, ...args);\n    }\n  }\n\n  // 警告メッセージ（注意喚起）\n  warn(message: string, ...args: unknown[]): void {\n    if (this.shouldLog('warn')) {\n      this.output('warn', `⚠️  ${message}`, ...args);\n    }\n  }\n\n  // エラーメッセージ（問題報告）\n  error(message: string, error?: Error, ...args: unknown[]): void {\n    if (this.shouldLog('error')) {\n      this.output('error', `❌ ${message}`, ...(error ? [error.message, ...args] : args));\n    }\n  }\n\n  // 成功メッセージ（処理完了）\n  success(message: string, ...args: unknown[]): void {\n    if (this.shouldLog('info')) {\n      this.output('success', `✅ ${message}`, ...args);\n    }\n  }\n\n  // ログレベル判定（CLAUDE.md: Type-Driven Development）\n  private shouldLog(level: LogLevel): boolean {\n    const levels: Record<LogLevel, number> = {\n      debug: 0,\n      info: 1,\n      warn: 2,\n      error: 3\n    };\n\n    return levels[level] >= levels[this.level];\n  }\n\n  // 出力処理（型安全性重視）\n  private output(level: LogLevel | 'success', message: string, ...args: unknown[]): void {\n    const timestamp = new Date().toISOString();\n    const coloredMessage = this.useColors ? colors[level as keyof typeof colors](message) : message;\n    \n    // レベル別出力先（error/warnはstderr、他はstdout）\n    const outputStream = (level === 'error' || level === 'warn') ? console.error : console.log;\n    \n    if (args.length > 0) {\n      outputStream(`${timestamp} ${coloredMessage}`, ...args);\n    } else {\n      outputStream(`${timestamp} ${coloredMessage}`);\n    }\n  }\n\n  // ログレベル変更（実行時調整用）\n  setLevel(level: LogLevel): void {\n    this.level = level;\n  }\n\n  // 色使用設定変更\n  setColorEnabled(enabled: boolean): void {\n    this.useColors = enabled;\n  }\n\n  // 現在設定取得\n  getConfig(): { level: LogLevel; useColors: boolean } {\n    return {\n      level: this.level,\n      useColors: this.useColors\n    };\n  }\n}\n\n// ファクトリー関数（CLAUDE.md: 簡潔性）\nexport function createLogger(level: LogLevel = 'info', useColors: boolean = true): ILogger {\n  return new Logger(level, useColors);\n}\n\n// 型安全なログレベル判定\nexport function isValidLogLevel(level: string): level is LogLevel {\n  return ['debug', 'info', 'warn', 'error'].includes(level);\n}"],"version":3}